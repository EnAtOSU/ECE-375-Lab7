
AVRASM ver. 2.2.8  C:\Users\Ian\Documents\GitHub\ECE-375-Lab7\Ian Version\AssemblerApplication6\Ian_Kiser_Evan_Shishido_Lab7_SourceCode.asm Thu Dec 05 14:07:38 2024

[builtin](2): Including file 'C:/microchip studio\7.0\Packs\Atmel\ATmega_DFP\2.2.509\avrasm\inc\m32U4def.inc'
C:\Users\Ian\Documents\GitHub\ECE-375-Lab7\Ian Version\AssemblerApplication6\Ian_Kiser_Evan_Shishido_Lab7_SourceCode.asm(17): Including file 'C:/microchip studio\7.0\Packs\Atmel\ATmega_DFP\2.2.509\avrasm\inc\m32U4def.inc'
C:\Users\Ian\Documents\GitHub\ECE-375-Lab7\Ian Version\AssemblerApplication6\Ian_Kiser_Evan_Shishido_Lab7_SourceCode.asm(1484): Including file 'C:\Users\Ian\Documents\GitHub\ECE-375-Lab7\Ian Version\AssemblerApplication6\LCDDriver.asm'
C:\Users\Ian\Documents\GitHub\ECE-375-Lab7\Ian Version\AssemblerApplication6\LCDDriver.asm(31): Including file 'C:/microchip studio\7.0\Packs\Atmel\ATmega_DFP\2.2.509\avrasm\inc\m32U4def.inc'
[builtin](2): Including file 'C:/microchip studio\7.0\Packs\Atmel\ATmega_DFP\2.2.509\avrasm\inc\m32U4def.inc'
C:\Users\Ian\Documents\GitHub\ECE-375-Lab7\Ian Version\AssemblerApplication6\Ian_Kiser_Evan_Shishido_Lab7_SourceCode.asm(17): Including file 'C:/microchip studio\7.0\Packs\Atmel\ATmega_DFP\2.2.509\avrasm\inc\m32U4def.inc'
C:\Users\Ian\Documents\GitHub\ECE-375-Lab7\Ian Version\AssemblerApplication6\Ian_Kiser_Evan_Shishido_Lab7_SourceCode.asm(1484): Including file 'C:\Users\Ian\Documents\GitHub\ECE-375-Lab7\Ian Version\AssemblerApplication6\LCDDriver.asm'
C:\Users\Ian\Documents\GitHub\ECE-375-Lab7\Ian Version\AssemblerApplication6\LCDDriver.asm(31): Including file 'C:/microchip studio\7.0\Packs\Atmel\ATmega_DFP\2.2.509\avrasm\inc\m32U4def.inc'
                                 
                                 
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32U4.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32U4def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32U4
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32U4
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32U4DEF_INC_
                                 #define _M32U4DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega32U4
                                 #pragma AVRPART ADMIN PART_NAME ATmega32U4
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x87
                                 
                                 #pragma AVRPART CORE CORE_VERSION V3
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	PLLCSR	= 0x29
                                 .equ	PLLFRQ	= 0x32
                                 .equ	UEINT	= 0xf4	; MEMORY MAPPED
                                 .equ	UEBCHX	= 0xf3	; MEMORY MAPPED
                                 .equ	UEBCLX	= 0xf2	; MEMORY MAPPED
                                 .equ	UEDATX	= 0xf1	; MEMORY MAPPED
                                 .equ	UEIENX	= 0xf0	; MEMORY MAPPED
                                 .equ	UESTA1X	= 0xef	; MEMORY MAPPED
                                 .equ	UESTA0X	= 0xee	; MEMORY MAPPED
                                 .equ	UECFG1X	= 0xed	; MEMORY MAPPED
                                 .equ	UECFG0X	= 0xec	; MEMORY MAPPED
                                 .equ	UECONX	= 0xeb	; MEMORY MAPPED
                                 .equ	UERST	= 0xea	; MEMORY MAPPED
                                 .equ	UENUM	= 0xe9	; MEMORY MAPPED
                                 .equ	UEINTX	= 0xe8	; MEMORY MAPPED
                                 .equ	UDMFN	= 0xe6	; MEMORY MAPPED
                                 .equ	UDFNUMH	= 0xe5	; MEMORY MAPPED
                                 .equ	UDFNUML	= 0xe4	; MEMORY MAPPED
                                 .equ	UDADDR	= 0xe3	; MEMORY MAPPED
                                 .equ	UDIEN	= 0xe2	; MEMORY MAPPED
                                 .equ	UDINT	= 0xe1	; MEMORY MAPPED
                                 .equ	UDCON	= 0xe0	; MEMORY MAPPED
                                 .equ	USBINT	= 0xda	; MEMORY MAPPED
                                 .equ	USBSTA	= 0xd9	; MEMORY MAPPED
                                 .equ	USBCON	= 0xd8	; MEMORY MAPPED
                                 .equ	UHWCON	= 0xd7	; MEMORY MAPPED
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ 	TWAMR		= 0xbd	;
                                 .equ  TWCR		= 0xbc	;
                                 .equ 	TWDR		= 0xbb	;
                                 .equ 	TWAR		= 0xba 	;
                                 .equ 	TWSR		= 0xb9	;
                                 .equ 	TWBR		= 0xb8	;
                                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	RCCTRL	= 0x67	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	EIND	= 0x3c
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR4	= 0x19
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTF	= 0x11
                                 .equ	DDRF	= 0x10
                                 .equ	PINF	= 0x0f
                                 .equ	PORTE	= 0x0e
                                 .equ	DDRE	= 0x0d
                                 .equ	PINE	= 0x0c
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	DT4	= 0xd4	; MEMORY MAPPED
                                 .equ	OCR4D	= 0xd2	; MEMORY MAPPED
                                 .equ	OCR4C	= 0xd1	; MEMORY MAPPED
                                 .equ	OCR4B	= 0xd0	; MEMORY MAPPED
                                 .equ	OCR4A	= 0xcf	; MEMORY MAPPED
                                 .equ	TCCR4E	= 0xc4	; MEMORY MAPPED
                                 .equ	TCCR4D	= 0xc3	; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xc2	; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xc1	; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xc0	; MEMORY MAPPED
                                 .equ	TC4H	= 0xbf	; MEMORY MAPPED
                                 .equ	TCNT4	= 0xbe	; MEMORY MAPPED
                                 .equ	CLKSEL1	= 0xc6	; MEMORY MAPPED
                                 .equ	CLKSEL0	= 0xc5	; MEMORY MAPPED
                                 .equ	CLKSTA	= 0xc7	; MEMORY MAPPED
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                                 .equ	ICF3	= 5	; Input Capture Flag 3
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode
                                 .equ	WGM31	= 1	; Waveform Generation Mode
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter 3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare 3C
                                 .equ	FOC3B	= 6	; Force Output Compare 3B
                                 .equ	FOC3A	= 7	; Force Output Compare 3A
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter 1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare 1C
                                 .equ	FOC1B	= 6	; Force Output Compare 1B
                                 .equ	FOC1A	= 7	; Force Output Compare 1A
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_4 **************
                                 ; DT4 - Timer/Counter 4 Dead Time Value
                                 .equ	DT4L0	= 0	; Timer/Counter 4 Dead Time Value Bit 0
                                 .equ	DT4L1	= 1	; Timer/Counter 4 Dead Time Value Bit 1
                                 .equ	DT4L2	= 2	; Timer/Counter 4 Dead Time Value Bit 2
                                 .equ	DT4L3	= 3	; Timer/Counter 4 Dead Time Value Bit 3
                                 .equ	DT4L4	= 4	; Timer/Counter 4 Dead Time Value Bit 4
                                 .equ	DT4L5	= 5	; Timer/Counter 4 Dead Time Value Bit 5
                                 .equ	DT4L6	= 6	; Timer/Counter 4 Dead Time Value Bit 6
                                 .equ	DT4L7	= 7	; Timer/Counter 4 Dead Time Value Bit 7
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 2	; Timer/Counter4 Overflow Flag
                                 .equ	OCF4B	= 5	; Output Compare Flag 4B
                                 .equ	OCF4A	= 6	; Output Compare Flag 4A
                                 .equ	OCF4D	= 7	; Output Compare Flag 4D
                                 
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 2	; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4B	= 5	; Timer/Counter4 Output Compare B Match Interrupt Enable
                                 .equ	OCIE4A	= 6	; Timer/Counter4 Output Compare A Match Interrupt Enable
                                 .equ	OCIE4D	= 7	; Timer/Counter4 Output Compare D Match Interrupt Enable
                                 
                                 ; OCR4D - Timer/Counter4 Output Compare Register D
                                 .equ	OCR4D0	= 0	; Timer/Counter4 Output Compare Register Low Byte bit 0
                                 .equ	OCR4D1	= 1	; Timer/Counter4 Output Compare Register Low Byte bit 1
                                 .equ	OCR4D2	= 2	; Timer/Counter4 Output Compare Register Low Byte bit 2
                                 .equ	OCR4D3	= 3	; Timer/Counter4 Output Compare Register Low Byte bit 3
                                 .equ	OCR4D4	= 4	; Timer/Counter4 Output Compare Register Low Byte bit 4
                                 .equ	OCR4D5	= 5	; Timer/Counter4 Output Compare Register Low Byte bit 5
                                 .equ	OCR4D6	= 6	; Timer/Counter4 Output Compare Register Low Byte bit 6
                                 .equ	OCR4D7	= 7	; Timer/Counter4 Output Compare Register Low Byte bit 7
                                 
                                 ; OCR4C - Timer/Counter4 Output Compare Register C
                                 .equ	OCR4C0	= 0	; Timer/Counter4 Output Compare Register bit 0
                                 .equ	OCR4C1	= 1	; Timer/Counter4 Output Compare Register bit 1
                                 .equ	OCR4C2	= 2	; Timer/Counter4 Output Compare Register bit 2
                                 .equ	OCR4C3	= 3	; Timer/Counter4 Output Compare Register bit 3
                                 .equ	OCR4C4	= 4	; Timer/Counter4 Output Compare Register bit 4
                                 .equ	OCR4C5	= 5	; Timer/Counter4 Output Compare Register bit 5
                                 .equ	OCR4C6	= 6	; Timer/Counter4 Output Compare Register 6
                                 .equ	OCR4C7	= 7	; Timer/Counter4 Output Compare Register bit 7
                                 
                                 ; OCR4B - Timer/Counter4 Output Compare Register B
                                 .equ	OCR4B0	= 0	; Timer/Counter4 Output Compare Register bit 0
                                 .equ	OCR4B1	= 1	; Timer/Counter4 Output Compare Register bit 1
                                 .equ	OCR4B2	= 2	; Timer/Counter4 Output Compare Register bit 2
                                 .equ	OCR4B3	= 3	; Timer/Counter4 Output Compare Register bit 3
                                 .equ	OCR4B4	= 4	; Timer/Counter4 Output Compare Register bit 4
                                 .equ	OCR4B5	= 5	; Timer/Counter4 Output Compare Register bit 5
                                 .equ	OCR4B6	= 6	; Timer/Counter4 Output Compare Register bit 6
                                 .equ	OCR4B7	= 7	; Timer/Counter4 Output Compare Register bit 7
                                 
                                 ; OCR4A - Timer/Counter4 Output Compare Register A
                                 .equ	OCR4A0	= 0	; Timer/Counter4 Output Compare Register Bit 0
                                 .equ	OCR4A1	= 1	; Timer/Counter4 Output Compare Register Bit 1
                                 .equ	OCR4A2	= 2	; Timer/Counter4 Output Compare Register Low Byte Bit 2
                                 .equ	OCR4A3	= 3	; Timer/Counter4 Output Compare Register Low Byte Bit 3
                                 .equ	OCR4A4	= 4	; Timer/Counter4 Output Compare Register Bit 4
                                 .equ	OCR4A5	= 5	; Timer/Counter4 Output Compare Register Bit 5
                                 .equ	OCR4A6	= 6	; Timer/Counter4 Output Compare Register Bit 6
                                 .equ	OCR4A7	= 7	; Timer/Counter4 Output Compare Register Bit 7
                                 
                                 ; TC4H - Timer/Counter4
                                 .equ	TC48	= 0	; Timer/Counter4 bit 8
                                 .equ	TC49	= 1	; Timer/Counter4 bit 9
                                 .equ	TC410	= 2	; Timer/Counter4 bit 10
                                 
                                 ; TCNT4 - Timer/Counter4 Low Bytes
                                 .equ	TC40	= 0	; Timer/Counter4 bit 0
                                 .equ	TC41	= 1	; Timer/Counter4 bit 1
                                 .equ	TC42	= 2	; Timer/Counter4 bit 2
                                 .equ	TC43	= 3	; Timer/Counter4  bit 3
                                 .equ	TC44	= 4	; Timer/Counter4 bit 4
                                 .equ	TC45	= 5	; Timer/Counter4 bit 5
                                 .equ	TC46	= 6	; Timer/Counter4 bit 6
                                 .equ	TC47	= 7	; Timer/Counter4 bit 7
                                 
                                 ; TCCR4E - Timer/Counter 4 Control Register E
                                 .equ	OC4OE0	= 0	; Output Compare Override Enable bit
                                 .equ	OC4OE1	= 1	; Output Compare Override Enable bit
                                 .equ	OC4OE2	= 2	; Output Compare Override Enable bit
                                 .equ	OC4OE3	= 3	; Output Compare Override Enable bit
                                 .equ	OC4OE4	= 4	; Output Compare Override Enable bit
                                 .equ	OC4OE5	= 5	; Output Compare Override Enable bit
                                 .equ	ENHC4	= 6	; Enhanced Compare/PWM Mode
                                 .equ	TLOCK4	= 7	; Register Update Lock
                                 
                                 ; TCCR4D - Timer/Counter 4 Control Register D
                                 .equ	WGM40	= 0	; Waveform Generation Mode bits
                                 .equ	WGM41	= 1	; Waveform Generation Mode bits
                                 .equ	FPF4	= 2	; Fault Protection Interrupt Flag
                                 .equ	FPAC4	= 3	; Fault Protection Analog Comparator Enable
                                 .equ	FPES4	= 4	; Fault Protection Edge Select
                                 .equ	FPNC4	= 5	; Fault Protection Noise Canceler
                                 .equ	FPEN4	= 6	; Fault Protection Mode Enable
                                 .equ	FPIE4	= 7	; Fault Protection Interrupt Enable
                                 
                                 ; TCCR4C - Timer/Counter 4 Control Register C
                                 .equ	PWM4D	= 0	; Pulse Width Modulator D Enable
                                 .equ	FOC4D	= 1	; Force Output Compare Match 4D
                                 .equ	COM4D0	= 2	; Comparator D Output Mode
                                 .equ	COM4D1	= 3	; Comparator D Output Mode
                                 .equ	COM4B0S	= 4	; Comparator B Output Mode
                                 .equ	COM4B1S	= 5	; Comparator B Output Mode
                                 .equ	COM4A0S	= 6	; Comparator A Output Mode
                                 .equ	COM4A1S	= 7	; Comparator A Output Mode
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0	; Clock Select Bit 0
                                 .equ	CS41	= 1	; Clock Select Bit 1
                                 .equ	CS42	= 2	; Clock Select Bit 2
                                 .equ	CS43	= 3	; Clock Select Bit 3
                                 .equ	DTPS40	= 4	; Dead Time Prescaler Bit 0
                                 .equ	DTPS41	= 5	; Dead Time Prescaler Bit 1
                                 .equ	PSR4	= 6	; Prescaler Reset Timer/Counter 4
                                 .equ	PWM4X	= 7	; PWM Inversion Mode
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	PWM4B	= 0	; 
                                 .equ	PWM4A	= 1	; 
                                 .equ	FOC4B	= 2	; Force Output Compare Match 4B
                                 .equ	FOC4A	= 3	; Force Output Compare Match 4A
                                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE6	= 6	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE6	= 6	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source 2
                                 .equ	ADTS3	= 4	; ADC Auto Trigger Source 3
                                 .equ	MUX5	= 5	; Analog Channel and Gain Selection Bits
                                 .equ	ADHSM	= 7	; ADC High Speed Mode
                                 
                                 ; DIDR0 - Digital Input Disable Register 1
                                 .equ	ADC0D	= 0	; ADC0 Digital input Disable
                                 .equ	ADC1D	= 1	; ADC1 Digital input Disable
                                 .equ	ADC2D	= 2	; ADC2 Digital input Disable
                                 .equ	ADC3D	= 3	; ADC3 Digital input Disable
                                 .equ	ADC4D	= 4	; ADC4 Digital input Disable
                                 .equ	ADC5D	= 5	; ADC5 Digital input Disable
                                 .equ	ADC6D	= 6	; ADC6 Digital input Disable
                                 .equ	ADC7D	= 7	; ADC7 Digital input Disable
                                 
                                 ; DIDR2 - Digital Input Disable Register 1
                                 .equ	ADC8D	= 0	; ADC8 Digital input Disable
                                 .equ	ADC9D	= 1	; ADC9 Digital input Disable
                                 .equ	ADC10D	= 2	; ADC10 Digital input Disable
                                 .equ	ADC11D	= 3	; ADC11 Digital input Disable
                                 .equ	ADC12D	= 4	; ADC12 Digital input Disable
                                 .equ	ADC13D	= 5	; ADC13 Digital input Disable
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - 
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; RCCTRL - Oscillator Control Register
                                 .equ	RCFREQ	= 0	; 
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; EIND - Extended Indirect Register
                                 .equ	EIND0	= 0	; Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRUSART1	= 0	; Power Reduction USART1
                                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                                 .equ	PRUSB	= 7	; Power Reduction USB
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 ; CLKSTA - 
                                 .equ	EXTON	= 0	; 
                                 .equ	RCON	= 1	; 
                                 
                                 ; CLKSEL0 - 
                                 .equ	CLKS	= 0	; 
                                 .equ	EXTE	= 2	; 
                                 .equ	RCE	= 3	; 
                                 .equ	EXSUT0	= 4	; 
                                 .equ	EXSUT1	= 5	; 
                                 .equ	RCSUT0	= 6	; 
                                 .equ	RCSUT1	= 7	; 
                                 
                                 ; CLKSEL1 - 
                                 .equ	EXCKSEL0	= 0	; 
                                 .equ	EXCKSEL1	= 1	; 
                                 .equ	EXCKSEL2	= 2	; 
                                 .equ	EXCKSEL3	= 3	; 
                                 .equ	RCCKSEL0	= 4	; 
                                 .equ	RCCKSEL1	= 5	; 
                                 .equ	RCCKSEL2	= 6	; 
                                 .equ	RCCKSEL3	= 7	; 
                                 
                                 
                                 ; ***** PLL **************************
                                 ; PLLCSR - PLL Status and Control register
                                 .equ	PLOCK	= 0	; PLL Lock Status Bit
                                 .equ	PLLE	= 1	; PLL Enable Bit
                                 .equ	PINDIV	= 4	; PLL prescaler Bit 2
                                 
                                 ; PLLFRQ - PLL Frequency Control Register
                                 .equ	PDIV0	= 0	; 
                                 .equ	PDIV1	= 1	; 
                                 .equ	PDIV2	= 2	; 
                                 .equ	PDIV3	= 3	; 
                                 .equ	PLLTM0	= 4	; 
                                 .equ	PLLTM1	= 5	; 
                                 .equ	PLLUSB	= 6	; 
                                 .equ	PINMUX	= 7	; 
                                 
                                 
                                 ; ***** USB_DEVICE *******************
                                 ; USBCON - USB General Control Register
                                 .equ	VBUSTE	= 0	; 
                                 .equ	OTGPADE	= 4	; 
                                 .equ	FRZCLK	= 5	; 
                                 .equ	USBE	= 7	; 
                                 
                                 ; UDCON - 
                                 .equ	DETACH	= 0	; 
                                 .equ	RMWKUP	= 1	; 
                                 .equ	LSM	= 2	; USB low speed mode
                                 .equ	RSTCPU	= 3	; 
                                 
                                 ; UDINT - 
                                 .equ	SUSPI	= 0	; 
                                 .equ	SOFI	= 2	; 
                                 .equ	EORSTI	= 3	; 
                                 .equ	WAKEUPI	= 4	; 
                                 .equ	EORSMI	= 5	; 
                                 .equ	UPRSMI	= 6	; 
                                 
                                 ; UDIEN - 
                                 .equ	SUSPE	= 0	; 
                                 .equ	SOFE	= 2	; 
                                 .equ	EORSTE	= 3	; 
                                 .equ	WAKEUPE	= 4	; 
                                 .equ	EORSME	= 5	; 
                                 .equ	UPRSME	= 6	; 
                                 
                                 ; UDADDR - 
                                 .equ	UADD0	= 0	; 
                                 .equ	UADD1	= 1	; 
                                 .equ	UADD2	= 2	; 
                                 .equ	UADD3	= 3	; 
                                 .equ	UADD4	= 4	; 
                                 .equ	UADD5	= 5	; 
                                 .equ	UADD6	= 6	; 
                                 .equ	ADDEN	= 7	; 
                                 
                                 ; UDFNUML - 
                                 .equ	FNUM0	= 0	; 
                                 .equ	FNUM1	= 1	; 
                                 .equ	FNUM2	= 2	; 
                                 .equ	FNUM3	= 3	; 
                                 .equ	FNUM4	= 4	; 
                                 .equ	FNUM5	= 5	; 
                                 .equ	FNUM6	= 6	; 
                                 .equ	FNUM7	= 7	; 
                                 
                                 ; UDFNUMH - 
                                 .equ	FNUM8	= 0	; 
                                 .equ	FNUM9	= 1	; 
                                 .equ	FNUM10	= 2	; 
                                 
                                 ; UDMFN - 
                                 .equ	FNCERR	= 4	; 
                                 
                                 ; UEINTX - 
                                 .equ	TXINI	= 0	; 
                                 .equ	STALLEDI	= 1	; 
                                 .equ	RXOUTI	= 2	; 
                                 .equ	RXSTPI	= 3	; 
                                 .equ	NAKOUTI	= 4	; 
                                 .equ	RWAL	= 5	; 
                                 .equ	NAKINI	= 6	; 
                                 .equ	FIFOCON	= 7	; 
                                 
                                 ; UENUM - 
                                 .equ	UENUM_0	= 0	; 
                                 .equ	UENUM_1	= 1	; 
                                 .equ	UENUM_2	= 2	; 
                                 
                                 ; UERST - 
                                 .equ	EPRST0	= 0	; 
                                 .equ	EPRST1	= 1	; 
                                 .equ	EPRST2	= 2	; 
                                 .equ	EPRST3	= 3	; 
                                 .equ	EPRST4	= 4	; 
                                 .equ	EPRST5	= 5	; 
                                 .equ	EPRST6	= 6	; 
                                 
                                 ; UECONX - 
                                 .equ	EPEN	= 0	; 
                                 .equ	RSTDT	= 3	; 
                                 .equ	STALLRQC	= 4	; 
                                 .equ	STALLRQ	= 5	; 
                                 
                                 ; UECFG0X - 
                                 .equ	EPDIR	= 0	; 
                                 .equ	EPTYPE0	= 6	; 
                                 .equ	EPTYPE1	= 7	; 
                                 
                                 ; UECFG1X - 
                                 .equ	ALLOC	= 1	; 
                                 .equ	EPBK0	= 2	; 
                                 .equ	EPBK1	= 3	; 
                                 .equ	EPSIZE0	= 4	; 
                                 .equ	EPSIZE1	= 5	; 
                                 .equ	EPSIZE2	= 6	; 
                                 
                                 ; UESTA0X - 
                                 .equ	NBUSYBK0	= 0	; 
                                 .equ	NBUSYBK1	= 1	; 
                                 .equ	DTSEQ0	= 2	; 
                                 .equ	DTSEQ1	= 3	; 
                                 .equ	UNDERFI	= 5	; 
                                 .equ	OVERFI	= 6	; 
                                 .equ	CFGOK	= 7	; 
                                 
                                 ; UESTA1X - 
                                 .equ	CURRBK0	= 0	; 
                                 .equ	CURRBK1	= 1	; 
                                 .equ	CTRLDIR	= 2	; 
                                 
                                 ; UEIENX - 
                                 .equ	TXINE	= 0	; 
                                 .equ	STALLEDE	= 1	; 
                                 .equ	RXOUTE	= 2	; 
                                 .equ	RXSTPE	= 3	; 
                                 .equ	NAKOUTE	= 4	; 
                                 .equ	NAKINE	= 6	; 
                                 .equ	FLERRE	= 7	; 
                                 
                                 ; UEDATX - 
                                 .equ	DAT0	= 0	; 
                                 .equ	DAT1	= 1	; 
                                 .equ	DAT2	= 2	; 
                                 .equ	DAT3	= 3	; 
                                 .equ	DAT4	= 4	; 
                                 .equ	DAT5	= 5	; 
                                 .equ	DAT6	= 6	; 
                                 .equ	DAT7	= 7	; 
                                 
                                 ; UEBCLX - 
                                 .equ	BYCT0	= 0	; 
                                 .equ	BYCT1	= 1	; 
                                 .equ	BYCT2	= 2	; 
                                 .equ	BYCT3	= 3	; 
                                 .equ	BYCT4	= 4	; 
                                 .equ	BYCT5	= 5	; 
                                 .equ	BYCT6	= 6	; 
                                 .equ	BYCT7	= 7	; 
                                 
                                 ; UEINT - 
                                 .equ	EPINT0	= 0	; 
                                 .equ	EPINT1	= 1	; 
                                 .equ	EPINT2	= 2	; 
                                 .equ	EPINT3	= 3	; 
                                 .equ	EPINT4	= 4	; 
                                 .equ	EPINT5	= 5	; 
                                 .equ	EPINT6	= 6	; 
                                 
                                 ; USBINT - 
                                 .equ	VBUSTI	= 0	; 
                                 
                                 ; USBSTA - 
                                 .equ	VBUS	= 0	; 
                                 .equ	SPEED	= 3	; 
                                 
                                 ; USBCON - USB General Control Register
                                 ;.equ	VBUSTE	= 0	; 
                                 ;.equ	OTGPADE	= 4	; 
                                 ;.equ	FRZCLK	= 5	; 
                                 ;.equ	USBE	= 7	; 
                                 
                                 ; UHWCON - 
                                 .equ	UVREGE	= 0	; 
                                 
                                 ; TWCR - Two-Wire Interface Control
                                 .equ		TWIE	= 0	;
                                 .equ 		TWEN	= 2	;
                                 .equ 		TWWC	= 3	;
                                 .equ 		TWSTO	= 4	;
                                 .equ 		TWSTA	= 5	;
                                 .equ 		TWEA	= 6	;
                                 .equ 		TWINT	= 7	;
                                 
                                 ; TWSR - Two-Wire Status
                                 .equ 		TWPS0	= 0	;
                                 .equ 		TWPS1	= 1	;
                                 
                                 ; TWAR
                                 .equ 		TWGCE	= 0	;
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Oscillator options
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 .equ	HWBE	= 3	; Hardware Boot Enable
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2560
                                 .equ	RAMEND	= 0x0aff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2560
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	Reserved1addr	= 0x000a	; Reserved1
                                 .equ	Reserved2addr	= 0x000c	; Reserved2
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	Reserved3addr	= 0x0010	; Reserved3
                                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                                 .equ	USB_GENaddr	= 0x0014	; USB General Interrupt Request
                                 .equ	USB_COMaddr	= 0x0016	; USB Endpoint/Pipe Interrupt Communication Request
                                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                                 .equ	Reserved4addr	= 0x001a	; Reserved4
                                 .equ	Reserved5addr	= 0x001c	; Reserved5
                                 .equ	Reserved6addr	= 0x001e	; Reserved6
                                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                                 .equ	URXC1addr	= 0x0032	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x0034	; USART1 Data register Empty
                                 .equ	UTXC1addr	= 0x0036	; USART1, Tx Complete
                                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                                 .equ	TWIaddr	= 0x0048	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x004a	; Store Program Memory Read
                                 .equ	OC4Aaddr	= 0x004c	; Timer/Counter4 Compare Match A
                                 .equ	OC4Baddr	= 0x004e	; Timer/Counter4 Compare Match B
                                 .equ	OC4Daddr	= 0x0050	; Timer/Counter4 Compare Match D
                                 .equ	OVF4addr	= 0x0052	; Timer/Counter4 Overflow
                                 .equ	TIMER4_FPFaddr	= 0x0054	; Timer/Counter4 Fault Protection Interrupt
                                 
                                 .equ	INT_VECTORS_SIZE	= 86	; size in words
                                 
                                 #endif  /* _M32U4DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ;***********************************************************
                                 ;*
                                 ;*	This is the TRANSMIT skeleton file for Lab 7 of ECE 375
                                 ;*
                                 ;*  	Rock Paper Scissors
                                 ;* 	Requirement:
                                 ;* 	1. USART1 communication
                                 ;* 	2. Timer/counter1 Normal mode to create a 1.5-sec delay
                                 ;***********************************************************
                                 ;*
                                 ;*	 Author: Ian Kiser, Evan Shishido
                                 ;*	   Date: 12/6/2024
                                 ;*
                                 ;***********************************************************
                                 
                                 .include "m32U4def.inc"         ; Include definition file
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32U4.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32U4def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32U4
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32U4
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32U4DEF_INC_
                                 #endif  /* _M32U4DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ;***********************************************************
                                 ;*  Internal Register Definitions and Constants
                                 ;***********************************************************
                                 .def    mpr = r16    ; Multi-Purpose Register		
                                 .def	choice_left = r17
                                 .def	choice_right = r18 ;makes sense to store choice values seperately from LCD because it will be easier to send between boards and interract with LCD
                                 .def	data = r19
                                 .def	interrupt_select = r23
                                 ;r20-r22 reserved by LCD driver
                                 
                                 ; Use this signal code between two boards for their game ready
                                 .equ    SendReady = 0b11111111
                                 
                                 ;***********************************************************
                                 ;*  Start of Code Segment
                                 ;***********************************************************
                                 .cseg                           ; Beginning of code segment
                                 
                                 ;***********************************************************
                                 ;*  Interrupt Vectors
                                 ;***********************************************************
                                 .org    $0000                   ; Beginning of IVs
000000 c055                      	    rjmp    INIT            	; Reset interrupt
                                 
                                 .org		$0002 ;int 0, will be tied to PD4, interrupts will need EIMSK, and EICRA/B registers set correctly
                                 		;select choice left
000002 d112                      		rcall interrupt_left
000003 9518                      		reti
                                 
                                 .org		$0004 ;int 1, might be tied to PD5, for extra credit
                                 		;select choice right
000004 d100                      		rcall interrupt_right
000005 9518                      		reti
                                 
                                 .org	$0028 ;timer counter 1 overflow interrupt
                                 		
000028 d093                      		rcall timer_interrupt
000029 9518                      		reti
                                 .org	$0032 ; recieve flag interrupt
000032 d15b                      rcall recieve
000033 9518                      reti
                                 
                                 ;.org read interrupt vector on usart 1
                                 
                                 .org    $0056                   ; End of Interrupt Vectors
                                 
                                 ;***********************************************************
                                 ;*  Program Initialization
                                 ;***********************************************************
                                 INIT:
                                 	;Stack Pointer (VERY IMPORTANT!!!!)
000056 ef0f                      	ldi mpr, low(RAMEND) ;retrieve ramend low from program memory
000057 bf0d                      	out SPL, mpr ;load ramend low into stack pointer low via mpr, out is needed as SP(stack pointer) is in io mem
000058 e00a                      	ldi mpr, high(RAMEND);retrieve ramend high from program memory
000059 bf0e                      	out SPH, mpr ;load ramend high into stack pointer low via mpr
                                 	
                                 
                                 
                                 	;I/O Ports
                                 	;port D -> input for button presses, 
00005a e000                      	ldi mpr, 0
00005b b90a                      	out DDRD, mpr ;set portD for input
00005c ef0f                      	ldi mpr, $FF
00005d b90b                      	out PORTD, mpr ;set pull up resistors
                                 
                                 	;port B -> PORTB[4:7] output for LED countdown/timer counter, PB[0:2] used by LCD driver
00005e ef0f                      	ldi mpr, $FF
00005f b904                      	out DDRB, mpr; set PORTB for output 
                                 
                                 	;configure external interrupts to trigger on falling edge ie button pressed, pin shorted to ground, for int0 and int1
                                 	;EICRA gets 0b00001010
000060 e00a                      	ldi mpr, 0b00001010
000061 9300 0069                 	sts EICRA, mpr
                                 
                                 	 
                                 
                                 
                                 
                                 	;USART1
                                 	;Set baudrate at 2400bps -> I believe system clock is 8MHz, therefore UBRR gets 207 by table 18-4 in data sheet
                                 	;Enable receiver and transmitter
                                 	;Set frame format: 8 data bits, 2 stop bits
                                 	;do not use SBI and CBI, and sbis sbic because of fifo 
                                 
                                 	;UCSR1A: bit 7 RXC1(recieve complete) -> 0, bit 6 TXC1 (transmit complete) -> 0, bit 5 UDRE1 (data reg empty) -> 1, error bits[4:2] -> 0
                                 	; bit 1 U2X1 (double transmit speed) -> 0 for normal speed, bit 0 MPCM1 (multi processor communication) -> 0 (do not want to send address info)
                                 
                                 	;UCSR1B: bit 7 RXCIE1 (RX complete interrupt enable) -> set for interrupt, bit 6 TXCIE1 (TX interrupt) -> set for interrupt, bit 5 UDRIE1 (interrupt for UDRE1 flag) -> set for interrupt
                                 	;bit 4 RXEN1 (reciever enable) -> 1, bit 3 TXEN1 (transmit enable) -> 1, bit 2 UCSZ12 (character size) -> 0 for 8 bit characters, bits[1:0] RX/TX 81 (recieve and transmit data bit 8) -> 0 I think since frams will be 8 bit  
                                 	
                                 	;UCSR1C: bits [7:6] UMSEL1 1/0 (usart mode select) -> 00 for asychronous, UPM1 1/0 (parit mode) -> 00 for disabled, bit 3 USBS1 (stop bit select) -> 1 for 2 bit, bits [2:1] UCSZ1 [1:0] (character size) -> 11 for 8 bit,
                                 	; bit 0 UCPOL1 (clock polarity) -> 0 for falling edge
                                 
                                 	;UCSR1D: might need to set bits 1:0 but probably not, they control something called transmission and reception flow control
                                 
                                 	;UCSR1A need not be loaded
                                 	;UCSR1B gets 0b10011000 -> enable read interrupt
                                 	;UCSR1C gets 0b00001110
                                 	;UBRRH1 gets 0b00000000
                                 	;UBRRL1 gets $CF -> 207
                                 
                                 
000063 e908                      	ldi mpr, 0b10011000 ; enable read interrupt
000064 9300 00c9                 	sts UCSR1B, mpr
000066 e00e                      	ldi mpr, 0b00001110
000067 9300 00ca                 	sts UCSR1C, mpr
                                 
000069 e000                      	ldi mpr, 0
00006a 9300 00cd                 	sts UBRR1H, mpr
00006c ec0f                      	ldi mpr, $CF
00006d 9300 00cc                 	sts UBRR1L, mpr
                                 
                                 
                                 	;TIMER/COUNTER1
                                 	;Set Normal mode
                                 	;No need for external pin interrupts -> all OC bits set low, Normal mode -> WGM bits low as well
                                 	;TCCR1A gets 0b00000000, This is initial value by default, no need to load
                                 	;no ICN stabilization, normal mode, and 1/256 prescaling -> TOV flag set about every 1.5 seconds when TCNT initially gets 48E4
                                 	;TCCR1B gets 0b00000010
00006f e000                      	ldi mpr, 0b00000000
000070 9300 0080                 	sts TCCR1A, mpr
000072 e004                      	ldi mpr, 0b00000100
000073 9300 0081                 	sts TCCR1B, mpr
                                 
                                 	
                                 
                                 	
                                 
                                 	;Other
000075 d250                      	rcall LCDInit
000076 d271                      	rcall LCDBacklightOn 
000077 d28d                      	rcall LCDClr
                                 	
                                 
                                 
                                 
                                 ;***********************************************************
                                 ;*  Main Program
                                 ;***********************************************************
                                 MAIN:
000078 9478                      sei
                                 
                                 
000079 e010                      ldi choice_left, 0
00007a e020                      ldi choice_right, 0
00007b e030                      ldi data, 0
00007c e070                      ldi interrupt_select, 0; interrupts now do choice select
                                 
00007d 9478                      sei
                                 ;launch to welcome screen, poll for PD7
                                 ;loop until PD7 pressed
00007e d120                      rcall welcome
                                 
                                 ;PD7 pressed
                                 ;begin continuously transmitting ready signal
                                 ;enable recieve interrupt 
                                 ;display ready and waiting screen
                                 transmit_loop:
00007f ef0f                      ldi mpr, SendReady
000080 d106                      rcall transmit
000081 3f3f                      cpi data, SendReady
000082 f7e1                      brne transmit_loop
                                 
                                 ;display game start
000083 d281                      rcall LCDClr
                                 
                                 ;simulated button presses
                                 
                                 
000084 d0f3                      rcall game_start
000085 e003                      ldi mpr, 0b00000011
000086 bb0d                      out EIMSK, mpr ;make sure pd4 and pd5 on correct interrupts
                                 ;wait 1.5 seconds
                                 ;start LED timer
000087 d029                      rcall LED_countdown
                                 
                                 
                                 
                                 ;timer ends
                                 ;disable int 0 (and possibly int 1 if extra credit) in interrupt mask
000088 e000                      ldi mpr, 0
000089 bb0d                      out EIMSK, mpr
00008a d27a                      rcall LCDClr
                                 
                                 
                                 ;choice_left and choice right now hold user choices 
                                 ;store on stack
00008b 931f                      push choice_left
00008c 932f                      push choice_right;user choices now saved
                                 
00008d d0e2                      rcall send_recieve_choice_left
                                 
00008e d0d9                      rcall send_recieve_choice_right
                                 
                                 
                                 
                                 ;display opponant choices
00008f d140                      rcall load_choice_left
000090 d18f                      rcall print_zy_top
000091 d15c                      rcall load_choice_right
000092 d1a3                      rcall print_yz_top
                                 
                                 
                                 ;swap stack values
000093 910f                      pop mpr ;mpr now has user choice right
000094 913f                      pop data ;data now has user choice left
000095 931f                      push choice_left
000096 932f                      push choice_right ;opponant choices now on stack
                                 
000097 2f20                      mov choice_right, mpr 
000098 2f13                      mov choice_left, data ;choice registers now have user choices
                                 
                                 
                                 
                                 ;display user choices
000099 d136                      rcall load_choice_left
00009a d1bb                      rcall print_zy_bottom
00009b d152                      rcall load_choice_right
00009c d1cf                      rcall print_yz_bottom
                                 
                                 
                                 
                                 ;start shoot
                                 ;enable EIMSk
00009d e001                      ldi mpr, 1 ;defualt shoot select
00009e e071                      ldi interrupt_select, 1 ;interrupts now do shoot
00009f e003                      ldi mpr, 0b00000011
0000a0 bb0d                      out EIMSK, mpr ;
                                 ;timer start again
                                 
                                 
0000a1 d00f                      rcall LED_countdown
                                 
                                 ;timer ends
                                 ;disable EIMSK again
0000a2 e070                      ldi interrupt_select,0
0000a3 bb0d                      out EIMSK, mpr
0000a4 e071                      ldi interrupt_select,1
                                 
                                 ;mpr now holds user shoot value, data holds opponant shoot value
                                 ;do shoot func
0000a5 3001                      cpi mpr, 1
0000a6 f011                      breq main_do_shoot_left
0000a7 3002                      cpi mpr, 2
0000a8 f011                      breq main_do_shoot_right
                                 
                                 
                                 main_do_shoot_left:
0000a9 d085                      rcall do_shoot_left
0000aa c001                      rjmp main_end_do_shoot
                                 
                                 main_do_shoot_right:
0000ab d0a5                      rcall do_shoot_right
                                 
                                 
                                 
                                 main_end_do_shoot:
                                 
                                 
0000ac d258                      rcall LCDClr
                                 ;display win/lose screen
0000ad d02c                      rcall calculate_results
                                 ;timer start again
0000ae d002                      rcall LED_countdown
                                 
                                 ;timer ends
                                 ;restart code
0000af d255                      rcall LCDClr
0000b0 cfc7                      rjmp MAIN
                                 
                                 ;***********************************************************
                                 ;*	Functions and Subroutines
                                 ;***********************************************************
                                 
                                 
                                 
                                 ;***********************************************************
                                 ;*	Func: led_countdown
                                 ;*	desc: uses interrupts for countdown
                                 ;***********************************************************
                                 led_countdown:
0000b1 930f                      push mpr
                                 
0000b2 e001                      ldi mpr, 1
0000b3 9300 006f                 sts TIMSK1, mpr ;overflow interrupt now enabled
                                 
0000b5 b105                      in mpr, PORTB
0000b6 6f00                      ori mpr, 0b11110000
0000b7 b905                      out PORTB, mpr
                                 
                                 timer_loop:
0000b8 992f                      sbic PORTB,7
0000b9 cffe                      rjmp timer_loop
                                 
                                 
                                 
0000ba 910f                      pop mpr
0000bb 9508                      ret
                                 
                                 
                                 ;***********************************************************
                                 ;*	Func: timer_interrupt
                                 ;*	desc: turns off correct LED in PORTB
                                 ;***********************************************************
                                 timer_interrupt:
                                 
                                 	;set TCNT1 so that an overflow is 1.5 seconds
0000bc e408                      	ldi mpr, $48
0000bd 9300 0085                 	sts TCNT1H, mpr
0000bf ee04                      	ldi mpr, $E4
0000c0 9300 0084                 	sts TCNT1L, mpr
                                 
                                 
0000c2 930f                      push mpr
0000c3 b70f                      in mpr, SREG
0000c4 930f                      push mpr
                                 
0000c5 992c                      sbic PORTB, 4
0000c6 c005                      rjmp B4
                                 
0000c7 992d                      sbic PORTB, 5
0000c8 c005                      rjmp B5
                                 
0000c9 992e                      sbic PORTB, 6
0000ca c005                      rjmp B6
                                 
0000cb c006                      rjmp B7
                                 
                                 
                                 B4:
0000cc 982c                      cbi PORTB, 4
0000cd c008                      rjmp timer_interrupt_end
                                 
                                 B5:
0000ce 982d                      cbi PORTB, 5
0000cf c006                      rjmp timer_interrupt_end
                                 
                                 B6:
0000d0 982e                      cbi PORTB, 6
0000d1 c004                      rjmp timer_interrupt_end
                                 
                                 B7:
0000d2 982f                      cbi PORTB, 7
0000d3 e000                      ldi mpr,0
0000d4 9300 006f                 sts TIMSK1, mpr ;overflow interrupt now disabled
                                 
                                 timer_interrupt_end:
                                 
                                 
0000d6 910f                      pop mpr
0000d7 bf0f                      out SREG, mpr
0000d8 910f                      pop mpr
0000d9 9508                      ret
                                 
                                 
                                 
                                 ;***********************************************************
                                 ;*	func: calculate results
                                 ;*	desc: based on choice left and choice right displays the correct win or lose screen 
                                 ;***********************************************************
                                 calculate_results:
0000da 930f                      push mpr
0000db 931f                      push choice_left
0000dc 932f                      push choice_right
                                 
                                 
0000dd d0f2                      rcall load_choice_left
0000de d177                      rcall print_zy_bottom
0000df d1e6                      rcall LCDInit ;werid LCD driver errors happen without this
                                 
                                 ;left - right
                                 ; 0-0 = 0 tie
                                 ; 0-1 = -1 lose
                                 ; 0-2 = -2 lose < 1
                                 ; 0-3 = -3 lose
                                 ; 1-0 = 1 win
                                 ; 1-1 = 0 tie
                                 ; 1-2 = -1 lose
                                 ; 1-3 = -2 win < 1
                                 ; 2-0 = 2 win < 2
                                 ; 2-1 = 1 win
                                 ; 2-2 = 0 tie
                                 ; 2-3 = -1 lose
                                 ; 3-0 = 3 win
                                 ; 3-1 = 2 lose < 2
                                 ; 3-2 = 1 win
                                 ; 3-3 = 0 tie
                                 
                                 
                                 ;0 is tie
                                 ;left is 0 is lose
                                 ;right is 0 is win 
                                 ; -1 is lose
                                 ; -2 is win (lose case is handled by left is 0 is lose)
                                 ; -3 is lose (redundant since left has to be zero here)
                                 ; 1 is win
                                 ; 2 is lose (win case is handled by right is 0 is win)
                                 ; 3 is win (redundant since right has to be zero here)
                                 
                                 
0000e0 2f01                      mov mpr, choice_left
0000e1 1b02                      sub mpr, choice_right
                                 
0000e2 3000                      cpi mpr, 0
0000e3 f061                      breq draw
                                 
0000e4 3010                      cpi choice_left, 0
0000e5 f0b1                      breq lose
                                 
0000e6 3020                      cpi choice_right, 0
0000e7 f071                      breq win
                                 
0000e8 3f0f                      cpi mpr, -1
0000e9 f091                      breq lose
                                 
0000ea 3f0e                      cpi mpr, -2
0000eb f051                      breq win
                                 
0000ec 3001                      cpi mpr, 1
0000ed f041                      breq win
                                 
0000ee 3002                      cpi mpr, 2
0000ef f061                      breq lose
                                 
                                 
                                 
                                 
                                 
                                 draw:
                                 
0000f0 e2e6                      ldi ZL, low(str_draw<<1)
0000f1 e0f5                      ldi ZH, high(str_draw<<1)
0000f2 e3c0                      ldi YL, low(str_draw_end<<1)
0000f3 e0d5                      ldi YH, high(str_draw_end<<1)
                                 
0000f4 d12b                      rcall print_zy_top
                                 
0000f5 c00b                      rjmp calculate_results_end
                                  
                                 win:
                                 
0000f6 e4e0                      ldi ZL, low(str_win<<1)
0000f7 e0f5                      ldi ZH, high(str_win<<1)
0000f8 e4c8                      ldi YL, low(str_win_end<<1)
0000f9 e0d5                      ldi YH, high(str_win_end<<1)
                                 
0000fa d125                      rcall print_zy_top
                                 
0000fb c005                      rjmp calculate_results_end
                                 
                                 lose:
0000fc e3e8                      ldi ZL, low(str_lose<<1)
0000fd e0f5                      ldi ZH, high(str_lose<<1)
0000fe e4c0                      ldi YL, low(str_lose_end<<1)
0000ff e0d5                      ldi YH, high(str_lose_end<<1)
                                 
000100 d11f                      rcall print_zy_top
                                 
                                 calculate_results_end:
                                 
000101 912f                      pop choice_right
000102 911f                      pop choice_left
000103 910f                      pop mpr
000104 9508                      ret
                                 
                                 
                                 
                                 
                                 ;***********************************************************
                                 ;*	Func: interrupt_right
                                 ;*	desc: interrupt choice on PD4
                                 ;***********************************************************
                                 
                                 interrupt_right:
                                 
000105 930f                      push mpr
000106 b70f                      in mpr, SREG
000107 930f                      push mpr
                                 
000108 e000                      ldi mpr, 0
000109 bb0d                      out EIMSK, mpr; disable inerrupts while here
                                 
00010a ff70                      sbrs interrupt_select, 0 ;if 0 bit is set, we want shoot interrupt
00010b d0b5                      rcall select_choice_right
                                 
00010c fd70                      sbrc interrupt_select, 0; if 0 bit is clear, we want select choice interrupt
00010d d039                      rcall shoot_right
                                 
                                 ;clear external interrupt flag register
00010e e003                      ldi mpr, 0b00000011 ;clear ints 1 and 2
00010f bb0c                      out EIFR, mpr
000110 bb0d                      out EIMSK, mpr
                                 
000111 910f                      pop mpr
000112 bf0f                      out SREG, mpr
000113 910f                      pop mpr
000114 9508                      ret
                                 
                                 
                                 ;***********************************************************
                                 ;*	Func: interrupt_left
                                 ;*	desc: interrupt choice on PD5
                                 ;***********************************************************
                                 
                                 interrupt_left:
000115 930f                      push mpr
000116 b70f                      in mpr, SREG
000117 930f                      push mpr
                                 
000118 e000                      ldi mpr, 0
000119 bb0d                      out EIMSK, mpr; disable inerrupts while here
                                 
00011a ff70                      sbrs interrupt_select, 0 ;if 0 bit is set, we want shoot interrupt
00011b d096                      rcall select_choice_left
                                 
00011c fd70                      sbrc interrupt_select, 0; if 0 bit is clear, we want select choice interrupt
00011d d007                      rcall shoot_left
                                 
                                 ;clear external interrupt flag register
00011e e003                      ldi mpr, 0b00000011 ;clear ints 1 and 2
00011f bb0c                      out EIFR, mpr
                                 
000120 bb0d                      out EIMSK, mpr; reenable interrupts
                                 
000121 910f                      pop mpr
000122 bf0f                      out SREG, mpr
000123 910f                      pop mpr
                                 
000124 9508                      ret
                                 
                                 
                                 
                                 ;***********************************************************
                                 ;*	Func: shoot_left
                                 ;*	desc: loads mpr with correct shoot value then sends via usart, then disables interrupts, so only one shoot allowed
                                 ;***********************************************************
                                 shoot_left:
                                 
                                 
000125 e000                      ldi mpr, 0
000126 bb0d                      out EIMSK, mpr
                                 
                                 
000127 e1e8                      ldi ZL, low(str_clear<<1)
000128 e0f5                      ldi ZH, high(str_clear<<1)
                                 
000129 e2c0                      ldi YL, low(str_clear_end<<1)
00012a e0d5                      ldi YH, high(str_clear_end<<1)
                                 
00012b d0f4                      rcall print_zy_top
                                 
                                 
00012c e001                      ldi mpr, 1
00012d d059                      rcall transmit
                                 
00012e 9508                      ret ;save mpr shoot value
                                 
                                 
                                 
                                 ;**************************************************
                                 ;*	func: do_shoot_left
                                 ;*	desc: loads correct values into choice left and choice right, where respectively each is final user choice then final opponant choice
                                 ;**************************************************
                                 do_shoot_left:
                                 
                                 
                                 
                                 ;data now holds shoot value
                                 
                                 
                                 
00012f 3031                      cpi data, 1
000130 f011                      breq do_shoot_left_left
000131 3032                      cpi data, 2
000132 f039                      breq do_shoot_left_right
                                 
                                 
                                 do_shoot_left_left:
000133 2f12                      mov choice_left, choice_right
                                 
000134 e1e8                      ldi ZL, low(str_clear<<1)
000135 e0f5                      ldi ZH, high(str_clear<<1)
                                 
000136 e2c0                      ldi YL, low(str_clear_end<<1)
000137 e0d5                      ldi YH, high(str_clear_end<<1)
                                 
000138 d11d                      rcall print_zy_bottom
                                 
000139 c005                      rjmp do_shoot_left_end_shoot
                                 
                                 do_shoot_left_right:
                                 ;nothing needs to be done, left already holds user choice
                                 
00013a e1e8                      ldi ZL, low(str_clear<<1)
00013b e0f5                      ldi ZH, high(str_clear<<1)
                                 
00013c e2c0                      ldi YL, low(str_clear_end<<1)
00013d e0d5                      ldi YH, high(str_clear_end<<1)
                                 
00013e d12d                      rcall print_yz_bottom
                                 
                                 do_shoot_left_end_shoot:
                                 
                                 ;opponant choice now shot and final now in choice_left
                                 
                                 
                                 
                                 ;stack has 
                                 ;opponant left
                                 ;opponant right
                                 ;do shoot call low or high
                                 ;do shoot call high or low
                                 
                                 
                                 ;save stack
                                 
00013f 910f                      pop mpr
000140 913f                      pop data ;return call now saved
000141 912f                      pop choice_right ; -> this will be saved
000142 917f                      pop interrupt_select ;-> discard opponant left
000143 e071                      ldi interrupt_select, 1; restore interrupt select
                                 
                                 ;restore stack
000144 933f                      push data
000145 930f                      push mpr
                                 
                                 ;stack now restored without opponant choices
                                 ;choice left has user choice, choice right has opponant choice
                                 
                                 
000146 9508                      ret
                                 
                                 
                                 ;***********************************************************
                                 ;*	Func: shoot_right
                                 ;*	desc: loads mpr with correct shoot value then sends via usart, then disables interrupts, so only one shoot allowed
                                 ;***********************************************************
                                 shoot_right:
                                 
                                 
000147 e000                      ldi mpr, 0
000148 bb0d                      out EIMSK, mpr
                                 
                                 
000149 e1e8                      ldi ZL, low(str_clear<<1)
00014a e0f5                      ldi ZH, high(str_clear<<1)
                                 
00014b e2c0                      ldi YL, low(str_clear_end<<1)
00014c e0d5                      ldi YH, high(str_clear_end<<1)
                                 
00014d d0e8                      rcall print_yz_top
                                 
00014e e002                      ldi mpr, 2
00014f d037                      rcall transmit
                                 
                                 
000150 9508                      ret ;save mpr shoot value
                                 
                                 
                                 
                                 ;**************************************************
                                 ;*	func: do_shoot_right
                                 ;*	desc: loads correct values into choice left and choice right, where respectively each is final user choice then final opponant choice
                                 ;**************************************************
                                 do_shoot_right:
                                 
                                 ;data now holds shoot value
                                 
                                 
                                 
000151 3031                      cpi data, 1
000152 f011                      breq do_shoot_right_left
000153 3032                      cpi data, 2
000154 f039                      breq do_shoot_right_right
                                 
                                 
                                 do_shoot_right_left:
000155 2f12                      mov choice_left, choice_right
                                 
000156 e1e8                      ldi ZL, low(str_clear<<1)
000157 e0f5                      ldi ZH, high(str_clear<<1)
                                 
000158 e2c0                      ldi YL, low(str_clear_end<<1)
000159 e0d5                      ldi YH, high(str_clear_end<<1)
                                 
00015a d0fb                      rcall print_zy_bottom
                                 
00015b c005                      rjmp do_shoot_right_end_shoot
                                 
                                 do_shoot_right_right:
                                 ;nothing needs to be done, left already holds user choice
                                 
                                 
00015c e1e8                      ldi ZL, low(str_clear<<1)
00015d e0f5                      ldi ZH, high(str_clear<<1)
                                 
00015e e2c0                      ldi YL, low(str_clear_end<<1)
00015f e0d5                      ldi YH, high(str_clear_end<<1)
                                 
000160 d10b                      rcall print_yz_bottom
                                 
                                 do_shoot_right_end_shoot:
                                 
                                 ;user choice now in choice_left
                                 
                                 
                                 ;stack has 
                                 ;opponant left
                                 ;opponant right
                                 ;do shoot call high or low
                                 ;do shoot call low or high
                                 ;saved mpr
                                 
                                 ;save stack
000161 910f                      pop mpr
000162 913f                      pop data ;ret call now saved
000163 912f                      pop choice_right ; -> this will be discarded
000164 912f                      pop choice_right ; -> discard choice right, save choice left
                                 
                                 ;restore stack
000165 933f                      push data
000166 930f                      push mpr
                                 ;stack now restored without opponant choices
                                 ;choice left has user choice, choice right has opponant choice
                                 
                                 
000167 9508                      ret
                                 
                                 
                                 
                                 
                                 
                                 
                                 ;***********************************************************
                                 ;*	Func: send_recieve_choice_right
                                 ;*	desc: transmits choice left and waits for verfication of reception
                                 ;***********************************************************
                                 send_recieve_choice_right:
000168 930f                      push mpr
                                 
                                 ;load data with known value
                                 ;load mpr with choice_left
                                 ;call transmit
                                 ;compare data with value
                                 ;if data not value continue otherwise loop
                                 
                                 send_recieve_choice_right_loop:
000169 e830                      ldi data, 0b10000000
00016a 2f01                      mov mpr, choice_left
00016b d01b                      rcall transmit
00016c 3830                      cpi data, 0b10000000
00016d f3d9                      breq send_recieve_choice_right_loop
                                 
                                 
00016e 910f                      pop mpr
00016f 9508                      ret
                                 
                                 
                                 
                                 ;***********************************************************
                                 ;*	Func: send_recieve_choice_left
                                 ;*	desc: transmits choice left and waits for verfication of reception
                                 ;***********************************************************
                                 send_recieve_choice_left:
000170 930f                      push mpr
                                 
                                 ;load data with known value
                                 ;load mpr with choice_left
                                 ;call transmit
                                 ;compare data with value
                                 ;if data not value continue otherwise loop
                                 
                                 send_recieve_choice_left_loop:
000171 e830                      ldi data, 0b10000000
000172 2f01                      mov mpr, choice_left
000173 d013                      rcall transmit
000174 3830                      cpi data, 0b10000000
000175 f3d9                      breq send_recieve_choice_left_loop
                                 
                                 
000176 910f                      pop mpr
000177 9508                      ret
                                 
                                 
                                 
                                 ;***********************************************************
                                 ;*	Func: game_start
                                 ;*	desc: display game start and start countdown 
                                 ;***********************************************************
                                 game_start:
000178 93ef                      push ZL
000179 93ff                      push ZH
00017a 93cf                      push YL
00017b 93df                      push YH
                                 
00017c e7ee                      ldi ZL, low(str_game<<1)
00017d e0f5                      ldi ZH, high(str_game<<1)
00017e e8c8                      ldi YL, low(str_game_end<<1)
00017f e0d5                      ldi YH, high(str_game_end<<1)
000180 d09f                      rcall print_zy_top
000181 d098                      rcall timer_1_5
                                 
                                 
000182 91df                      pop YH
000183 91cf                      pop YL
000184 91ff                      pop ZH
000185 91ef                      pop ZL
000186 9508                      ret
                                 
                                 
                                 ;***********************************************************
                                 ;*	Func: transmit
                                 ;*	desc: transmits mpr to UDR1
                                 ;***********************************************************
                                 transmit:
000187 930f                      push mpr
                                 
000188 d00f                      rcall check_UDR1
000189 9300 00ce                 sts UDR1, mpr
00018b d00c                      rcall check_UDR1
                                 
00018c 910f                      pop mpr
00018d 9508                      ret
                                 
                                 ;***********************************************************
                                 ;*	Func: recieve
                                 ;*	desc: loads data register with usart reception value
                                 ;***********************************************************
                                 recieve:
00018e 930f                      push mpr
00018f b70f                      in mpr, SREG
000190 930f                      push mpr
                                 
                                 
000191 9130 00ce                 lds data, UDR1
000193 d004                      rcall check_UDR1
                                 
                                 
000194 910f                      pop mpr
000195 bf0f                      out SREG, mpr
000196 910f                      pop mpr
000197 9508                      ret
                                 
                                 ;***********************************************************
                                 ;*	Func: check_UDR1
                                 ;*	desc: returns once the UDR1 register has been cleared, uses 
                                 ;***********************************************************
                                 check_UDR1:
000198 930f                      push mpr
                                 
                                 check_UDR1_not_clear:
000199 9100 00c8                 lds mpr, UCSR1A
00019b ff05                      sbrs mpr, 5
00019c f7e1                      brne check_UDR1_not_clear ;if data reg not empty wait for it to be empty
                                 
                                 
                                 
00019d 910f                      pop mpr
00019e 9508                      ret
                                 
                                 
                                 
                                 
                                 
                                 
                                 ;***********************************************************
                                 ;*	Func: welcome
                                 ;*	desc: display welcome screen and poll for PD7, exit when pressed and then released
                                 ;***********************************************************
                                 welcome:
00019f 930f                      push mpr
                                 
                                 
0001a0 e4e8                      ldi ZL, low(str_welcome1<<1)
0001a1 e0f5                      ldi ZH, high(str_welcome1<<1)
                                 
0001a2 e5c0                      ldi YL, low(str_welcome1_end<<1)
0001a3 e0d5                      ldi YH, high(str_welcome1_end<<1)
                                 
0001a4 d07b                      rcall print_zy_top
                                 
0001a5 e5e0                      ldi ZL, low(str_welcome2<<1)
0001a6 e0f5                      ldi ZH, high(str_welcome2<<1)
                                 
0001a7 e6c0                      ldi YL, low(str_welcome2_end<<1)
0001a8 e0d5                      ldi YH, high(str_welcome2_end<<1)
                                 
0001a9 d0ac                      rcall print_zy_bottom
                                 
                                 
                                 welcome_not_pressed:
0001aa 994f                      sbic PIND, PD7
0001ab cffe                      rjmp welcome_not_pressed
                                 ;PD7 is now pressed
0001ac 0000                      nop
0001ad 0000                      nop ;avoid some debouncing
                                 welcome_pressed:
0001ae 9b4f                      sbis PIND, PD7
0001af cffe                      rjmp welcome_pressed
                                 ;PD7 is now released
                                 
                                 
                                 
0001b0 910f                      pop mpr
0001b1 9508                      ret
                                 
                                 
                                 
                                 
                                 
                                 ;***********************************************************
                                 ;*	Func: select_choice_left
                                 ;*	desc: cycles through choices for rock paper scissors and prints them to the LCD on the left hand side, preserves right hand side of LCD
                                 ;***********************************************************
                                 select_choice_left:
0001b2 930f                      push mpr
                                 
                                 ;changes made to choice left will be saved globally
                                 
                                 ;valid choice values include 1,2,3, for rock paper and scissors respectively. 0 will be initialization value so when button is first pressed rock is shown 
                                 ;check if choice left is 10, load with 00 if so
                                 ;otherwise increment choice left
                                 
0001b3 3013                      cpi choice_left, 3
0001b4 f011                      breq select_choice_left_rollover ;if at two do not increment
                                 
0001b5 9513                      inc choice_left
                                 
0001b6 c001                      rjmp select_choice_left_chosen ;do not roll over if unneeded 
                                 
                                 select_choice_left_rollover:
0001b7 e011                      ldi choice_left, 1
                                 
                                 select_choice_left_chosen:
                                 ;load z and y with labels for str clear
                                 ;call zy print function to write spaces to left hand side of LCD without clearing right hand side
                                 ;based on choice left value load Z and Y with appropriate labels for word
                                 ;call zy print function
                                 
0001b8 e1e8                      ldi ZL, low(str_clear<<1)
0001b9 e0f5                      ldi ZH, high(str_clear<<1)
                                 
0001ba e2c0                      ldi YL, low(str_clear_end<<1)
0001bb e0d5                      ldi YH, high(str_clear_end<<1)
                                 
0001bc d099                      rcall print_zy_bottom ;write clear string to left side of LCD
0001bd d012                      rcall load_choice_left ;load Z and Y registers with correct string lables
0001be d097                      rcall print_zy_bottom ;print correct choice of string to LCD
                                 
                                 
0001bf 910f                      pop mpr
0001c0 9508                      ret
                                 ;end select_choice_left
                                 
                                 
                                 
                                 
                                 ;***********************************************************
                                 ;*	Func: select_choice_right
                                 ;*	desc: cycles through choices for rock paper scissors and prints them to the LCD on the left hand side, preserves right hand side of LCD
                                 ;***********************************************************
                                 select_choice_right:
0001c1 930f                      push mpr
                                 
                                 ;changes made to choice left will be saved globally
                                 
                                 ;valid choice values include 1,2,3, for rock paper and scissors respectively. 0 will be initialization value so when button is first pressed rock is shown 
                                 ;check if choice left is 10, load with 00 if so
                                 ;otherwise increment choice left
                                 
0001c2 3023                      cpi choice_right, 3
0001c3 f011                      breq select_choice_right_rollover ;if at two do not increment
                                 
0001c4 9523                      inc choice_right
                                 
0001c5 c001                      rjmp select_choice_right_chosen ;do not roll over if unneeded 
                                 
                                 select_choice_right_rollover:
0001c6 e021                      ldi choice_right, 1
                                 
                                 select_choice_right_chosen:
                                 ;load z and y with labels for str clear
                                 ;call zy print function to write spaces to left hand side of LCD without clearing right hand side
                                 ;based on choice left value load Z and Y with appropriate labels for word
                                 ;call zy print function
                                 
0001c7 e1e8                      ldi ZL, low(str_clear<<1)
0001c8 e0f5                      ldi ZH, high(str_clear<<1)
                                 
0001c9 e2c0                      ldi YL, low(str_clear_end<<1)
0001ca e0d5                      ldi YH, high(str_clear_end<<1)
                                 
0001cb d0a0                      rcall print_yz_bottom ;write clear string to left side of LCD
0001cc d021                      rcall load_choice_right ;load Z and Y registers with correct string lables
0001cd d09e                      rcall print_yz_bottom ;print correct choice of string to LCD
                                 
                                 
                                 
0001ce 910f                      pop mpr
0001cf 9508                      ret
                                 ;end select_choice_right
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 ;***********************************************************
                                 ;*	Func: load_choice_left
                                 ;*	desc: loads correct string into Z and Y registers depending on choice left value
                                 ;***********************************************************
                                 load_choice_left:
0001d0 930f                      push mpr
                                 
                                 
0001d1 3010                      cpi choice_left, 0
0001d2 f031                      breq load_choice_left_clear
                                 
0001d3 3011                      cpi choice_left, 1
0001d4 f049                      breq load_choice_left_rock
                                 
0001d5 3012                      cpi choice_left, 2
0001d6 f061                      breq load_choice_left_paper		;find choice_left value
                                 
0001d7 3013                      cpi choice_left, 3
0001d8 f079                      breq load_choice_left_scissors
                                 
                                 load_choice_left_clear:
                                 
0001d9 e1e8                      ldi ZL, low(str_clear<<1)
0001da e0f5                      ldi ZH, high(str_clear<<1)
                                 
0001db e2c0                      ldi YL, low(str_clear_end<<1)
0001dc e0d5                      ldi YH, high(str_clear_end<<1)
                                 
0001dd c00e                      rjmp load_choice_left_end
                                 
                                 load_choice_left_rock:
0001de e8e8                      ldi ZL, low(str_rock<<1)
0001df e0f5                      ldi ZH, high(str_rock<<1)
                                 
0001e0 e8cc                      ldi YL, low(str_rock_end<<1)
0001e1 e0d5                      ldi YH, high(str_rock_end<<1)
                                 
0001e2 c009                      rjmp load_choice_left_end
                                 
                                 load_choice_left_paper:				;load correct string beginning into Z, and end into Y
0001e3 e2e0                      ldi ZL, low(str_paper<<1)
0001e4 e0f5                      ldi ZH, high(str_paper<<1)
                                 
0001e5 e2c6                      ldi YL, low(str_paper_end<<1)
0001e6 e0d5                      ldi YH, high(str_paper_end<<1)
                                 
0001e7 c004                      rjmp load_choice_left_end
                                 
                                 load_choice_left_scissors:
0001e8 e3e0                      ldi ZL, low(str_scissors<<1)
0001e9 e0f5                      ldi ZH, high(str_scissors<<1)
                                 
0001ea e3c8                      ldi YL, low(str_scissors_end<<1)
0001eb e0d5                      ldi YH, high(str_scissors_end<<1)
                                 
                                 load_choice_left_end:
0001ec 910f                      pop mpr
0001ed 9508                      ret
                                 ;end load_choice_left
                                 
                                 
                                 ;***********************************************************
                                 ;*	Func: load_choice_right
                                 ;*	desc: loads correct string into Z and Y registers depending on choice right value
                                 ;***********************************************************
                                 load_choice_right:
0001ee 930f                      push mpr
                                 
0001ef 3020                      cpi choice_right, 0
0001f0 f031                      breq load_choice_right_clear
                                 
0001f1 3021                      cpi choice_right, 1
0001f2 f049                      breq load_choice_right_rock
                                 
0001f3 3022                      cpi choice_right, 2
0001f4 f061                      breq load_choice_right_paper		;find choice_left value
                                 
0001f5 3023                      cpi choice_right, 3
0001f6 f079                      breq load_choice_right_scissors
                                 
                                 load_choice_right_clear:
                                 
0001f7 e1e8                      ldi ZL, low(str_clear<<1)
0001f8 e0f5                      ldi ZH, high(str_clear<<1)
                                 
0001f9 e2c0                      ldi YL, low(str_clear_end<<1)
0001fa e0d5                      ldi YH, high(str_clear_end<<1)
                                 
0001fb c00e                      rjmp load_choice_right_end
                                 
                                 load_choice_right_rock:
0001fc e8e8                      ldi ZL, low(str_rock<<1)
0001fd e0f5                      ldi ZH, high(str_rock<<1)
                                 
0001fe e8cc                      ldi YL, low(str_rock_end<<1)
0001ff e0d5                      ldi YH, high(str_rock_end<<1)
                                 
000200 c009                      rjmp load_choice_right_end
                                 
                                 load_choice_right_paper:				;load correct string beginning into Z, and end into Y
000201 e2e0                      ldi ZL, low(str_paper<<1)
000202 e0f5                      ldi ZH, high(str_paper<<1)
                                 
000203 e2c6                      ldi YL, low(str_paper_end<<1)
000204 e0d5                      ldi YH, high(str_paper_end<<1)
                                 
000205 c004                      rjmp load_choice_right_end
                                 
                                 load_choice_right_scissors:
000206 e3e0                      ldi ZL, low(str_scissors<<1)
000207 e0f5                      ldi ZH, high(str_scissors<<1)
                                 
000208 e3c8                      ldi YL, low(str_scissors_end<<1)
000209 e0d5                      ldi YH, high(str_scissors_end<<1)
                                 
                                 load_choice_right_end:
00020a 910f                      pop mpr
00020b 9508                      ret
                                 
                                 ;end load_choice_right
                                 
                                 
                                 ;***********************************************************
                                 ;*	Func: led_countdown_n
                                 ;*	desc: uses polling for countdown
                                 ;***********************************************************
                                 led_countdown_n:
00020c 930f                      push mpr
                                 
00020d b105                      in mpr, PORTB
00020e 6f00                      ori mpr, 0b11110000
00020f b905                      out PORTB, mpr ;all led's are now set
                                 
000210 d009                      rcall timer_1_5 ;wait
000211 982c                      cbi PORTB, 4
000212 d007                      rcall timer_1_5 ;repeat for other bits
000213 982d                      cbi PORTB, 5
000214 d005                      rcall timer_1_5
000215 982e                      cbi PORTB, 6
000216 d003                      rcall timer_1_5
000217 982f                      cbi PORTB, 7
                                 
000218 910f                      pop mpr
000219 9508                      ret
                                 ;end led_countdown
                                 
                                 
                                 
                                 ;***********************************************************
                                 ;*	Func: timer_1_5
                                 ;*	desc: uses timer counter 1 over flow to count 
                                 ;***********************************************************
                                 timer_1_5:
                                 ;push stuff to stack
00021a 930f                      push mpr
                                 
                                 	timer_1_5_NoFlag:
00021b 9bb0                      sbis TIFR1, 0 ;skip loop if TOV1 is set
00021c cffe                      rjmp timer_1_5_NoFlag
                                 
00021d 9ab0                      sbi TIFR1, 0 ;reset TOV1
                                 
00021e 910f                      pop mpr
00021f 9508                      ret
                                 ;end timer_1_5
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 ;***********************************************************
                                 ;*	Func: print_zy_top
                                 ;*	desc: stores string stored in program memory and writes it to the top line of the LCD screen
                                 ;*	REMEMBER: the address stored in z and in y must be initially bit shifted by 1 due to least sig bit being low or high indicator.
                                 ;*	WARNING - assumes Z stores the address of the beginning of the string and Y stores the end of the string to print.
                                 ;***********************************************************
                                 print_zy_top:
000220 930f                      push mpr
000221 93af                      push XL
000222 93bf                      push XH
000223 93ef                      push ZL
000224 93ff                      push ZH
000225 93cf                      push YL
000226 93df                      push YH
                                 
                                 
000227 e0a0                      ldi XL, LOW(lcd_buffer_addr) ;point X to the top line of the LCD buffer address in data memory
000228 e0b1                      ldi XH, HIGH(lcd_buffer_addr)
                                 
                                 print_zy_top_loop:
000229 9105                      lpm mpr, Z+ ;load value stored at the address to the beginning of the string (stored in X) to mpr, then inc X to point to next char. ie. first character of string is loaded into mpr
00022a 930d                      st X+, mpr ;Store that character to the beginning of the LCD buffer, then increment to next spot in LCD buffer
                                 
00022b 17ec                      cp ZL, YL  ;compare where Z points (current address) to Y (end of string), we only need Low byte since start and end are definitely far enough away to cause roll over errors
00022c f7e1                      brne print_zy_top_loop ;if not at end keep loading LCD buffer
                                 
00022d d0c1                      rcall	LCDWrLn1 ;once done write to LCD
                                 
00022e 91df                      pop YH
00022f 91cf                      pop YL
000230 91ff                      pop ZH
000231 91ef                      pop ZL
000232 91bf                      pop XH
000233 91af                      pop XL 
000234 910f                      pop mpr
000235 9508                      ret
                                 ;end print_zy_top
                                 
                                 
                                 
                                 
                                 
                                 ;***********************************************************
                                 ;*	Func: print_yz_top
                                 ;*	desc: stores string stored in program memory and writes it to the top line of the LCD screen on the right
                                 ;*	REMEMBER: the address stored in z and in y must be initially bit shifted by 1 due to least sig bit being low or high indicator. 
                                 ;*	REMEMBER: you must clear line outside of this function to prevent overwriting
                                 ;*	WARNING: assumes Z stores the address of the beginning of the string and Y stores the end of the string to print.
                                 ;***********************************************************
                                 print_yz_top:
000236 930f                      push mpr
000237 93af                      push XL
000238 93bf                      push XH
000239 93ef                      push ZL
00023a 93ff                      push ZH
00023b 93cf                      push YL
00023c 93df                      push YH
                                 
                                 ;must call lpm on Z, and need to call at end adress so shift Z->Y, and Y->Z for sake of function
00023d 2fae                      mov XL, ZL
00023e 2fbf                      mov XH, ZH ;X now temporarily holds old Z
                                 
00023f 2fec                      mov ZL, YL
000240 2ffd                      mov ZH, YH ;Z now holds old Y 
                                 
000241 2fca                      mov YL, XL
000242 2fdb                      mov YH, XH ;Y now holds old Z via X
                                 
000243 e1a0                      ldi XL, LOW(lcd_buffer_addr+16) ;point x to the bottom line of the LCD buffer address in data memory
000244 e0b1                      ldi XH, HIGH(lcd_buffer_addr+16)
                                 
                                 print_yz_top_loop:
000245 9104                      lpm mpr, Z ;load value stored at the address to the beginning of the string (stored in X) to mpr, then inc X to point to next char. ie. first character of string is loaded into mpr
000246 930c                      st X, mpr ;Store that character to the beginning of the LCD buffer, then increment to next spot in LCD buffer
                                 
000247 9731                      sbiw ZH:ZL, 1
000248 9711                      sbiw XH:XL, 1
                                 
                                 
000249 17ec                      cp ZL, YL ;compare where Z points (beginning of string) to Y (Current address), we only need Low byte since start and end are definitely not far enough away to cause roll over errors
00024a f7d1                      brne print_yz_top_loop ;if not at end keep loading LCD buffer
                                 
00024b 9104                      lpm mpr, Z; store last character (dec YL inside loop triggers reset interrupt for some reason)
00024c 930c                      st X, mpr
                                 
00024d d0a1                      rcall	LCDWrLn1 ;once done write to LCD 
                                 
00024e 91df                      pop YH
00024f 91cf                      pop YL
000250 91ff                      pop ZH
000251 91ef                      pop ZL
000252 91bf                      pop XH
000253 91af                      pop XL 
000254 910f                      pop mpr
000255 9508                      ret
                                 ;end print_yz_top
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 ;***********************************************************
                                 ;*	Func: print_zy_bottom
                                 ;*	desc: stores string stored in program memory and writes it to the bottom line of the LCD screen on the left
                                 ;*	REMEMBER: the address stored in z and in y must be initially bit shifted by 1 due to least sig bit being low or high indicator. 
                                 ;*	REMEMBER: you must clear line outside of this function to prevent overwriting
                                 ;*	WARNING: assumes Z stores the address of the beginning of the string and Y stores the end of the string to print.
                                 ;***********************************************************
                                 print_zy_bottom:
000256 930f                      push mpr
000257 93af                      push XL
000258 93bf                      push XH
000259 93ef                      push ZL
00025a 93ff                      push ZH
00025b 93cf                      push YL
00025c 93df                      push YH
                                 
                                 
00025d e1a0                      ldi XL, LOW(lcd_buffer_addr+16) ;point x to the bottom line of the LCD buffer address in data memory
00025e e0b1                      ldi XH, HIGH(lcd_buffer_addr+16)
                                 
                                 print_zy_bottom_left_loop:
00025f 9105                      lpm mpr, Z+ ;load value stored at the address to the beginning of the string (stored in X) to mpr, then inc X to point to next char. ie. first character of string is loaded into mpr
000260 930d                      st X+, mpr ;Store that character to the beginning of the LCD buffer, then increment to next spot in LCD buffer
                                 
000261 17ec                      cp ZL, YL ;compare where Z points (current address) to Y (end of string), we only need Low byte since start and end are definitely not far enough away to cause roll over errors
000262 f7e1                      brne print_zy_bottom_left_loop ;if not at end keep loading LCD buffer
                                 
000263 d096                      rcall	LCDWrLn2 ;once done write to LCD 
                                 
000264 91df                      pop YH
000265 91cf                      pop YL
000266 91ff                      pop ZH
000267 91ef                      pop ZL
000268 91bf                      pop XH
000269 91af                      pop XL 
00026a 910f                      pop mpr
00026b 9508                      ret
                                 ;end print_zy_bottom
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 ;***********************************************************
                                 ;*	Func: print_yz_bottom
                                 ;*	desc: stores string stored in program memory and writes it to the bottom line of the LCD screen on the right
                                 ;*	REMEMBER: the address stored in z and in y must be initially bit shifted by 1 due to least sig bit being low or high indicator. 
                                 ;*	REMEMBER: you must clear line outside of this function to prevent overwriting
                                 ;*	WARNING: assumes Z stores the address of the beginning of the string and Y stores the end of the string to print.
                                 ;***********************************************************
                                 print_yz_bottom:
00026c 930f                      push mpr
00026d 93af                      push XL
00026e 93bf                      push XH
00026f 93ef                      push ZL
000270 93ff                      push ZH
000271 93cf                      push YL
000272 93df                      push YH
                                 
                                 ;must call lpm on Z, and need to call at end adress so shift Z->Y, and Y->Z for sake of function
000273 2fae                      mov XL, ZL
000274 2fbf                      mov XH, ZH ;X now temporarily holds old Z
                                 
000275 2fec                      mov ZL, YL
000276 2ffd                      mov ZH, YH ;Z now holds old Y 
                                 
000277 2fca                      mov YL, XL
000278 2fdb                      mov YH, XH ;Y now holds old Z via X
                                 
000279 e2a0                      ldi XL, LOW(lcd_buffer_addr+32) ;point x to the bottom line of the LCD buffer address in data memory
00027a e0b1                      ldi XH, HIGH(lcd_buffer_addr+32)
                                 
                                 print_yz_bottom_loop:
00027b 9104                      lpm mpr, Z ;load value stored at the address to the beginning of the string (stored in X) to mpr, then inc X to point to next char. ie. first character of string is loaded into mpr
00027c 930c                      st X, mpr ;Store that character to the beginning of the LCD buffer, then increment to next spot in LCD buffer
                                 
00027d 9731                      sbiw ZH:ZL, 1
00027e 9711                      sbiw XH:XL, 1
                                 
                                 
00027f 17ec                      cp ZL, YL ;compare where Z points (beginning of string) to Y (Current address), we only need Low byte since start and end are definitely not far enough away to cause roll over errors
000280 f7d1                      brne print_yz_bottom_loop ;if not at end keep loading LCD buffer
                                 
000281 9104                      lpm mpr, Z; store last character (dec YL inside loop triggers reset interrupt for some reason)
000282 930c                      st X, mpr
                                 
000283 d076                      rcall	LCDWrLn2 ;once done write to LCD 
                                 
000284 91df                      pop YH
000285 91cf                      pop YL
000286 91ff                      pop ZH
000287 91ef                      pop ZL
000288 91bf                      pop XH
000289 91af                      pop XL 
00028a 910f                      pop mpr
00028b 9508                      ret
                                 ;end print_yz_bottom
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 ;***********************************************************
                                 ;*	Stored Program Data
                                 ;***********************************************************
                                 
                                 ;-----------------------------------------------------------
                                 ; An example of storing a string. Note the labels before and
                                 ; after the .DB directive; these can help to access the data
                                 ;-----------------------------------------------------------
                                 
                                 str_clear:
00028c 2020
00028d 2020
00028e 2020
00028f 2020                      .db "        "
                                 str_clear_end:
                                 
                                 str_paper:
000290 6170
000291 6570
000292 2072                      .db "paper "
                                 str_paper_end:
                                 
                                 
                                 str_draw:
000293 6f59
000294 2075
000295 7244
000296 7761
000297 2021                      .db "You Draw! "
                                 str_draw_end:
                                 
                                 
                                 str_scissors:
000298 6373
000299 7369
00029a 6f73
00029b 2072                      .db "scissor "
                                 str_scissors_end:
                                 
                                 str_lose:
00029c 6f59
00029d 2075
00029e 6f4c
00029f 6573                      .db "You Lose"
                                 str_lose_end:
                                 
                                 str_win:
0002a0 6f59
0002a1 2075
0002a2 6957
0002a3 216e                      .db "You Win!"
                                 str_win_end:
                                 
                                 
                                 
                                 str_welcome1:
0002a4 6577
0002a5 636c
0002a6 6d6f
0002a7 2065                      .db "welcome "
                                 str_welcome1_end:
                                 
                                 str_welcome2:
0002a8 6c50
0002a9 6165
0002aa 6573
0002ab 5020
0002ac 6572
0002ad 7373
0002ae 5020
0002af 3744                      .db "Please Press PD7"
                                 str_welcome2_end:
                                 
                                 str_start1:
0002b0 6552
0002b1 6461
0002b2 2c79
0002b3 5720
0002b4 6961
0002b5 6974
0002b6 676e                      .db "Ready, Waiting"
                                 str_start1_end:
                                 
                                 str_start2:
0002b7 6f66
0002b8 2072
0002b9 6874
0002ba 2065
0002bb 706f
0002bc 6f70
0002bd 656e
0002be 746e                      .db "for the opponent"
                                 str_start2_end:
                                 
                                 str_game:
0002bf 6147
0002c0 656d
0002c1 5320
0002c2 6174
0002c3 7472                      .db "Game Start"
                                 str_game_end:
                                 
                                 
                                 str_rock:
0002c4 6f52
0002c5 6b63                      .db	"Rock"		
                                 str_rock_end:
                                 
                                 ;***********************************************************
                                 ;*	Additional Program Includes
                                 ;***********************************************************
                                 .include "LCDDriver.asm"		; Include the LCD Driver
                                 
                                 ;*	Oregon State University
                                 ;*	ST7565R LCD Driver
                                 ;*	This code configures the graphical LCD and emulates
                                 ;*	the behavior of a 2x16 character display.
                                 ;*
                                 ;*	The LCD has room for 32 characters in total
                                 ;*	(16 on the top and 16 on the bottom).
                                 ;*	The upper 16 characters should be located in SRAM starting at 0x0100.
                                 ;*	The lower 16 characters should be located in SRAM starting at 0x0110.
                                 ;*
                                 ;*	NOTE: Register r16 MUST be named 'mpr' in the Main Code
                                 ;*	Something like this:
                                 ;*	.def	mpr = r16
                                 ;*
                                 ;*	WARNING: Register r20-r22 are reserved and cannot be
                                 ;*		renamed outside of the LCD Driver functions. Doing
                                 ;*		so will damage the functionality of the LCD Driver
                                 ;*
                                 ;*	Acknowledgements: the Bin2ASCII and div10 procedures were written by
                                 ;*	David Zier for a previous board. The code has been retained intact.
                                 ;*
                                 ;*********************************************************************
                                 ;*	Rev	Date		Name			Description
                                 ;*--------------------------------------------------------------------
                                 ;*	-	8/18/22	Justin Goins	Version 1.0
                                 ;*
                                 ;*
                                 ;*********************************************************************
                                 
                                 .include "m32U4def.inc"				; Include definition file
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32U4.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32U4def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32U4
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32U4
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32U4DEF_INC_
                                 #endif  /* _M32U4DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Register definitions
                                 .def	count = r20			; Character Counter
                                 .def	q = r21			; Quotient for div10
                                 .def	r = r22			; Remander for div10
                                 
                                 ; The following constants are not intended to be modified.
                                 .equ 	lcd_buffer_addr = 0x0100 ; define the SRAM base address of the LCD buffer
                                 
                                 ; This information is gathered from the ST7565R datasheet.
                                 ; define some command patterns
                                 .equ	lcd_c_disp_en = 0b10101110 ; lsb indicates whether the LCD is on (1) or off (0)
                                 .equ	lcd_c_disp_set_start_ln = 0b01000000 ; lower 6 bits indicate the line index (0 - 63)
                                 .equ	lcd_c_disp_set_page_addr = 0b10110000 ; lower 4 bits indicate the page address (page 3 is at top and page 0 is at bottom)
                                 ; together, these commands allow you to specify a column index from (0 - 131):
                                 .equ	lcd_c_disp_set_col_addr_h = 0b00010000 ; lower 4 bits indicate the 4 high bits of the column address
                                 .equ	lcd_c_disp_set_col_addr_l = 0b00000000 ; lower 4 bits indicate the 4 low bits of the column address
                                 .equ	lcd_c_disp_set_invert = 0b10100110 ; lsb indicates whether the LCD is normal (0) or inverted (1)
                                 .equ	lcd_c_disp_fill = 0b10100100 ; lsb indicates whether the LCD is normal (0) or filled with dots (1)
                                 .equ	lcd_c_disp_reset = 0b11100010 ; resets the line/page addresses and other stuff, does not affect data RAM
                                 .equ	lcd_c_disp_set_bias = 0xA2 ; 1/6 bias (in 1/33 duty mode)
                                 .equ	lcd_c_disp_set_scandir = 0b11000000 ; select normal scan direction (most significant bit is placed at top of LCD)
                                 .equ	lcd_c_disp_set_contrast_1 = 0b10000001 ; first we send this command then we pass the value
                                 .equ	lcd_c_disp_set_contrast_2 = 15 ; can select a contrast value between 1 and 63
                                 .equ	lcd_c_disp_set_res_ratio = 0x22 ; see the datasheet
                                 .equ	lcd_c_disp_vreg_on = 0x2F ; enable voltage booster, voltage regulator, and voltage follower
                                 
                                 ; use this command to write into the LCD RAM:
                                 .equ	lcd_c_disp_write = 0b00000000 ; these 8 bits are the data to be placed in the target. 
                                 ; note that the column address is automatically incremented by 1 after each write to the LCD data
                                 
                                 ; everything in this driver file needs to go into the code segment
                                 .cseg
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDInit
                                 ;* Desc:	This function initializes the LCD control pins and
                                 ;*		sets reasonable values for the configuration registers.
                                 ;*****************************************************************
                                 LCDInit:
0002c6 930f                      	push	mpr
                                 
                                 	; set MOSI, SCL, and SS as outputs
0002c7 9a22                      	sbi	DDRB, DDB2	; Port B 2
0002c8 9a21                      	sbi	DDRB, DDB1	; Port B 1
0002c9 9a20                      	sbi	DDRB, DDB0	; Port B 0
                                 	; ensure that SS is deactivated (active low)
0002ca 9a28                      	sbi	PORTB, 0
                                 	; set lcd_A0 as output
0002cb 9a81                      	sbi	DDRF, DDF1	; Port F 1
                                 	; enable LCD backlight control
0002cc 9a3f                      	sbi	DDRC, DDC7	; Port C 7
                                 	; set lcd_RST_N as output
0002cd 9a80                      	sbi	DDRF, DDF0	; Port F 0
                                 	; we pull lcd_RST_N low for 1 millisecond
0002ce 9888                      	cbi	PORTF, 0
0002cf 940e 03b1                 	call	LCDDelay
0002d1 9a88                      	sbi	PORTF, 0
                                 	; Enable SPI mode 3, master configuration, set clock rate fck/2 using SPI2X
0002d2 e50c                      	ldi	mpr, (1<<SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA)
0002d3 bd0c                      	out	SPCR, mpr
0002d4 e001                      	ldi	mpr, (1<<SPI2X)
0002d5 bd0d                      	out	SPSR, mpr
                                 	; Note: after transmitting a byte, the SPI interrupt flag will
                                 	; be automatically cleared next time we: 1) read SPSR and ALSO 2) access SPDR
                                 
0002d6 9828                      	cbi	PORTB, 0	; activate slave select
                                 	; send a string of initialization commands
0002d7 ea02                      	ldi	mpr, lcd_c_disp_set_bias
0002d8 d0d2                      	rcall	LCD_Internal_WriteCMD
0002d9 ec00                      	ldi	mpr, lcd_c_disp_set_scandir
0002da d0d0                      	rcall	LCD_Internal_WriteCMD
0002db e801                      	ldi	mpr, lcd_c_disp_set_contrast_1
0002dc d0ce                      	rcall	LCD_Internal_WriteCMD
0002dd e00f                      	ldi	mpr, lcd_c_disp_set_contrast_2
0002de d0cc                      	rcall	LCD_Internal_WriteCMD
0002df e202                      	ldi	mpr, lcd_c_disp_set_res_ratio
0002e0 d0ca                      	rcall	LCD_Internal_WriteCMD
0002e1 e20f                      	ldi	mpr, lcd_c_disp_vreg_on
0002e2 d0c8                      	rcall	LCD_Internal_WriteCMD
0002e3 ea0f                      	ldi	mpr, (lcd_c_disp_en | 1 << 0)
0002e4 d0c6                      	rcall	LCD_Internal_WriteCMD
0002e5 9a28                      	sbi	PORTB, 0	; deactivate slave select
                                 
0002e6 910f                      	pop	mpr
0002e7 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDBacklightOn
                                 ;* Desc:	Enables the backlight
                                 ;*****************************************************************
                                 LCDBacklightOn:
0002e8 9a47                      	sbi	PORTC, 7
0002e9 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDBacklightOff
                                 ;* Desc:	Disables the backlight
                                 ;*****************************************************************
                                 LCDBacklightOff:
0002ea 9847                      	cbi	PORTC, 7
0002eb 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDWrite
                                 ;* Desc:	This function writes 32 characters to the LCD screen...
                                 ;*		16 chars on the top line and 16 chars on the bottom line.
                                 ;*****************************************************************
                                 LCDWrite:
                                 	
0002ec d002                      	rcall	LCDWrLn1
0002ed d00c                      	rcall	LCDWrLn2
0002ee 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDWrLn1
                                 ;* Desc:	This function writes 16 characters to the top line.
                                 ;*****************************************************************
                                 LCDWrLn1:
0002ef 93bf                      	push	XH
0002f0 93af                      	push	XL
0002f1 931f                      	push 	r17
                                 	; r17 specifies the destination bank in LCD RAM
0002f2 e013                      	ldi	r17, 3
                                 	; point X at the ASCII data
0002f3 e0b1                      	ldi	XH, HIGH(lcd_buffer_addr)
0002f4 e0a0                      	ldi	XL, LOW(lcd_buffer_addr)
0002f5 d05c                      	rcall	LCD_Internal_WriteLn
0002f6 911f                      	pop	r17
0002f7 91af                      	pop	XL
0002f8 91bf                      	pop	XH
0002f9 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDWrLn2
                                 ;* Desc:	This function writes 16 characters to the bottom line.
                                 ;*****************************************************************
                                 LCDWrLn2:
0002fa 93bf                      	push	XH
0002fb 93af                      	push	XL
0002fc 931f                      	push	 r17
                                 	; r17 specifies the destination bank in LCD RAM
0002fd e011                      	ldi	r17, 1
                                 	; point X at the ASCII data
0002fe e0b1                      	ldi	XH, HIGH(lcd_buffer_addr+16)
0002ff e1a0                      	ldi	XL, LOW(lcd_buffer_addr+16)
000300 d051                      	rcall	LCD_Internal_WriteLn
000301 911f                      	pop	r17
000302 91af                      	pop	XL
000303 91bf                      	pop	XH
000304 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDClr
                                 ;* Desc:	This function clears the entire LCD screen.
                                 ;*****************************************************************
                                 LCDClr:
000305 d022                      	rcall	LCDClrLn1
000306 d027                      	rcall	LCDClrLn2
                                 
000307 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	CLRDM1
                                 ;* Desc:	This function clears Data Memory by writing 16 
                                 ;*		consecutive ASCII spaces $20 to the memory at $0100.
                                 ;*****************************************************************
                                 CLRDM1:
                                     ; Set X register points to $0100
000308 93bf                      	   push	   XH
000309 93af                      	   PUSH	   XL
00030a 930f                                 push    r16
00030b 931f                                 push    r17
                                 
00030c e0b1                                 ldi     XH, HIGH(lcd_buffer_addr)
00030d e0a0                                 ldi     XL, LOW(lcd_buffer_addr)
00030e e110                                 ldi     r17, 16
00030f e200                                 ldi     r16, ' '
                                    CLRloop1:
000310 930d                                 st      X+, r16         ; load data to DM
000311 951a                                 dec     r17
000312 f7e9                                 brne    CLRloop1
                                 
000313 911f                      	   pop	   r17
000314 910f                      	   pop	   r16
000315 91af                      	   pop	   XL
000316 91bf                      	   pop	   XH
                                 
000317 9508                                 ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	CLRDM2
                                 ;* Desc:	This function clears Data Memory by writing 16 
                                 ;*		consecutive ASCII spaces $20 to the memory at $0110.
                                 ;*****************************************************************
                                 CLRDM2:
                                     ; Set X register points to $0110
000318 93bf                      	   push	   XH
000319 93af                      	   PUSH	   XL
00031a 930f                                 push    r16
00031b 931f                                 push    r17
                                 
00031c e0b1                                 ldi     XH, HIGH(lcd_buffer_addr+16)
00031d e1a0                                 ldi     XL, LOW(lcd_buffer_addr+16)
00031e e110                                 ldi     r17, 16
00031f e200                                 ldi     r16, ' '
                                    CLRloop2:
000320 930d                                 st      X+, r16         ; load data to DM
000321 951a                                 dec     r17
000322 f7e9                                 brne    CLRloop2
                                 
000323 911f                      	   pop	   r17
000324 910f                      	   pop	   r16
000325 91af                      	   pop	   XL
000326 91bf                      	   pop	   XH
                                 
000327 9508                                 ret
                                 ;*****************************************************************
                                 ;* Func:	LCDClrLn1
                                 ;* Desc:	This function clears the top line of the LCD screen.
                                 ;*****************************************************************
                                 LCDClrLn1:
000328 931f                      	push	 r17
                                 	; r17 specifies the target bank in LCD RAM
000329 e013                      	ldi	r17, 3
00032a d060                      	rcall	LCD_Internal_ClearLn
00032b dfdc                      	rcall	CLRDM1
00032c 911f                      	pop	r17
00032d 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDClrLn2
                                 ;* Desc:	This function clears the bottom line of the LCD screen.
                                 ;*****************************************************************
                                 LCDClrLn2:
00032e 931f                      	push	 r17
                                 	; r17 specifies the target bank in LCD RAM
00032f e011                      	ldi	r17, 1
000330 d05a                      	rcall	LCD_Internal_ClearLn
000331 dfe6                      	rcall	CLRDM2
000332 911f                      	pop	r17
000333 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	Bin2ASCII
                                 ;* Desc:	Converts a binary number into an ASCII 
                                 ;*			text string equivalent. 
                                 ;*			- The binary number needs to be in the mpr
                                 ;*			- The Start Address of where the text will
                                 ;*			 	be placed needs to be in the X Register
                                 ;*			- The count of the characters created are 
                                 ;*				added to the count register
                                 ;*****************************************************************
                                 Bin2ASCII:
000334 930f                      	push	 mpr			; save mpr
000335 936f                      	push	 r			; save r
000336 935f                      	push	 q			; save q
000337 93bf                      	push	 XH			; save X-pointer
000338 93af                      	push	 XL			;
                                 
                                 	; Determine the range of mpr
000339 3604                      	cpi	mpr, 100		; is mpr >= 100
00033a f018                      	brlo	 B2A_1			; goto next check
00033b e043                      	ldi	count, 3		; Three chars are written
00033c 9613                      	adiw	 XL, 3			; Increment X 3 address spaces
00033d c007                      	rjmp	 B2A_3			; Continue with program
                                 B2A_1:
00033e 300a                      	cpi	mpr, 10		; is mpr >= 10
00033f f018                      	brlo	 B2A_2			; Continue with program
000340 e042                      	ldi	count, 2		; Two chars are written
000341 9612                      	adiw	 XL, 2			; Increment X 2 address spaces
000342 c002                      	rjmp	 B2A_3			; Continue with program
                                 B2A_2:
000343 9611                      	adiw	 XL, 1			; Increment X 1 address space
000344 e041                      	ldi	count, 1		; One char is written
                                 
                                 B2A_3:
                                 	; Do-While statement that converts Binary to ASCII
000345 d076                      	rcall	div10			; Call the div10 function
000346 e300                      	ldi	mpr, '0'		; Set the base ASCII integer value
000347 0f06                      	add	mpr, r		; Create the ASCII integer value
000348 930e                      	st	-X, mpr		; Load ASCII value to memory
000349 2f05                      	mov	mpr, q		; Set mpr to quotient value
00034a 3000                      	cpi	mpr, 0		; does mpr == 0
00034b f7c9                      	brne 	B2A_3			; do while (mpr != 0)
                                 
00034c 91af                      	pop	XL			; restore X-pointer
00034d 91bf                      	pop	XH			;
00034e 915f                      	pop	q			; restore q
00034f 916f                      	pop	r			; restore r
000350 910f                      	pop	mpr			; restore mpr
000351 9508                      	ret				; return from function
                                 
                                 ;*****************************************************************
                                 ;*	The functions below here are intended for internal use only.
                                 ;*****************************************************************
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCD_Internal_WriteLn
                                 ;* Desc:	Sends 16 characters of information to the LCD panel
                                 ;*		This is slightly more complicated than it sounds because the
                                 ;*		characters straddle two banks of the LCD memory.
                                 ;*		X is pointing at the first ASCII character to be displayed.
                                 ;*		r17 holds the index of the destination bank in LCD RAM.
                                 ;*		
                                 ;*****************************************************************
                                 LCD_Internal_WriteLn:
000352 920f                      	push	 r0
000353 921f                      	push	 r1
000354 930f                      	push	 mpr
000355 932f                      	push	 r18
000356 933f                      	push	 r19
000357 938f                      	push	 r24
000358 939f                      	push	 r25
000359 93ef                      	push	 ZL
00035a 93ff                      	push	 ZH
                                 
                                 	; r25:24 holds a pointer to the base address of the bitmap array
00035b e097                      	ldi	r25, HIGH(FontBitmap << 1);
00035c ec84                      	ldi	r24, LOW(FontBitmap << 1);
                                 
00035d 9828                      	cbi	PORTB, 0	; activate slave select
                                 
                                 	; use a counter to track if we are on the top chunk or bottom chunk of each char
00035e e022                      	ldi	r18, 2
                                 
                                 LCD_WL_display_bank:
                                 	; set the column to 0
00035f e100                      	ldi	mpr, lcd_c_disp_set_col_addr_h
000360 d04a                      	rcall	LCD_Internal_WriteCMD
000361 e000                      	ldi	mpr, lcd_c_disp_set_col_addr_l
000362 d048                      	rcall	LCD_Internal_WriteCMD
                                 	; we need to select the appropriate page
000363 eb00                      	ldi	mpr, lcd_c_disp_set_page_addr
000364 2b01                      	or	mpr, r17	; set the lower 4 bits
000365 d045                      	rcall	LCD_Internal_WriteCMD
                                 
000366 e130                      	ldi	r19, 16	; there are 16 characters per line
                                 
                                 LCD_WL_next_char:
                                 	; get ascii code point & determine location of corresponding character bitmap
000367 900d                      	ld	r0, X+	; this should be a value from 0 to 255
000368 e100                      	ldi	mpr, 16	; there are 16 bytes per character
000369 9e00                      	mul	r0, mpr	; determine the byte offset for the desired char
00036a 01fc                      	movw	 ZH:ZL, r25:r24	; copy the base address to Z
00036b 0de0                      	add	ZL, r0	; finally, compute a pointer to the char bitmap
00036c 1df1                      	adc	ZH, r1
                                 
00036d e008                      	ldi	mpr, 8	; there are 8 columns for each character
                                 
                                 	; this is where we display the chunk of character (either a top chunk or bottom chunk)
00036e 9004                      	lpm	r0, Z
                                 LCD_WL_next_col:
00036f bc0e                      	out	SPDR, r0
000370 9a89                      	sbi	PORTF, 1	; set lcd_A0 to specify data mode
000371 9632                      	adiw	 ZH:ZL, 2	; point Z at the next column for this bank
000372 9004                      	lpm	r0, Z		; this is a sneaky way to save a few clock cycles (since we are waiting for the SPI communication)
                                 LCD_WL_wait_spi:
000373 b41d                      	in	r1, SPSR
000374 fe17                      	sbrs	 r1, SPIF	; wait for SPI to finish
000375 cffd                      	rjmp	 LCD_WL_wait_spi
                                 
                                 	; keep going until we have displayed all the columns for this character
000376 950a                      	dec	mpr
000377 f7b9                      	brne	 LCD_WL_next_col
                                 
                                 	; move to the next character
000378 953a                      	dec	r19
000379 f769                      	brne	 LCD_WL_next_char
                                 
                                 	; if we are at the end of the line, configure the bank and starting array offset for the bottom half of each char
00037a 952a                      	dec	r18		; did we display both banks yet?
00037b f021                      	breq	 LCD_WL_all_done
                                 	; if not, then prepare to display the bottom chunk of each character
00037c 951a                      	dec	r17		; decrement the bank number
00037d 9750                      	sbiw	 XH:XL, 16	; X needs to point back at the beginning character of the line
00037e 9601                      	adiw	 r25:r24, 1	; increment the base address pointer (now it will point to the second chunk of each char)
00037f cfdf                      	rjmp	 LCD_WL_display_bank
                                 
                                 LCD_WL_all_done:
000380 9a28                      	sbi	PORTB, 0	; deactivate slave select
                                 
000381 91ff                      	pop	ZH
000382 91ef                      	pop	ZL
000383 919f                      	pop	r25
000384 918f                      	pop	r24
000385 913f                      	pop	r19
000386 912f                      	pop	r18
000387 910f                      	pop	mpr
000388 901f                      	pop	r1
000389 900f                      	pop	r0
00038a 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCD_Internal_ClearLn
                                 ;* Desc:	This function clears two of the LCD memory banks.
                                 ;*		r17 specifies the starting bank to wipe.
                                 ;*****************************************************************
                                 LCD_Internal_ClearLn:
00038b 930f                      	push 	mpr
00038c 921f                      	push 	r1
00038d 932f                      	push	 r18
00038e 933f                      	push	 r19
                                 
00038f 9828                      	cbi	PORTB, 0	; activate slave select
000390 e032                      	ldi	r19, 2	; we are going to clear two banks
                                 
                                 LCD_CLRLN_clear_bank:
                                 	; set the column to 0
000391 e100                      	ldi	mpr, lcd_c_disp_set_col_addr_h
000392 d018                      	rcall	LCD_Internal_WriteCMD
000393 e000                      	ldi	mpr, lcd_c_disp_set_col_addr_l
000394 d016                      	rcall	LCD_Internal_WriteCMD
                                 	; we need to select the appropriate page
000395 eb00                      	ldi	mpr, lcd_c_disp_set_page_addr
000396 2b01                      	or	mpr, r17	; configure the lower 4 bits
000397 d013                      	rcall	LCD_Internal_WriteCMD
                                 
000398 e820                      	ldi	r18, 128	; there are 128 columns on the LCD
000399 2700                      	clr	mpr		; we will fill each column with empty dots (i.e. blank space)
00039a 9a89                      	sbi	PORTF, 1	; set lcd_A0 to specify data mode
                                 
                                 LCD_CLRLN_write_col:
00039b bd0e                      	out	SPDR, mpr	; send an empty column to the LCD via SPI
                                 LCD_CLRLN_wait_spi:
00039c b41d                      	in	r1, SPSR
00039d fe17                      	sbrs	 r1, SPIF	; wait for SPI to finish
00039e cffd                      	rjmp 	LCD_CLRLN_wait_spi
                                 
00039f 952a                      	dec	r18
0003a0 f7d1                      	brne	LCD_CLRLN_write_col	; cycle through all 128 columns
                                 
                                 	; clear the remaining bank if we haven't done so already
0003a1 953a                      	dec	r19
0003a2 f011                      	breq	LCD_CLRLN_all_done
0003a3 951a                      	dec	r17		; decrement the bank index
0003a4 cfec                      	rjmp	LCD_CLRLN_clear_bank
                                 
                                 LCD_CLRLN_all_done:
0003a5 9a28                      	sbi	PORTB, 0	; deactivate slave select	
                                 	
                                 	; pop registers...
0003a6 913f                      	pop	r19
0003a7 912f                      	pop	r18
0003a8 901f                      	pop	r1
0003a9 910f                      	pop	mpr
0003aa 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCD_Internal_WriteCMD
                                 ;* Desc:	Sends the byte in mpr
                                 ;*		If you use this function directly,
                                 ;*		YOU ARE RESPONSIBLE for handling the slave select line!
                                 ;*****************************************************************
                                 LCD_Internal_WriteCMD:
0003ab bd0e                      	out	SPDR, mpr	; initiate transmission
0003ac 9889                      	cbi	PORTF, 1	; clear lcd_A0 to put the lcd into command mode
                                 				; (this just has to be done before the 8th bit
                                 				; is transmitted via SPI)
                                 LCD_IWC_L1:
0003ad b50d                      	in	mpr, SPSR
0003ae ff07                      	sbrs	 mpr, SPIF	; wait for SPI to finish
0003af cffd                      	rjmp LCD_IWC_L1
0003b0 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDDelay
                                 ;* Desc:	A wait loop that will consume roughly 1ms
                                 ;*		Note that a CALL takes 4 cycles on top of this delay.
                                 ;*****************************************************************
                                 LCDDelay:
0003b1 930f                      	push 	mpr		; 2 cycles
0003b2 931f                      	push	 r17		; 2 cycles
0003b3 e01b                      	ldi	r17, 11	; 1 cycle
                                 LCDDelay_L1:
0003b4 ef02                      	ldi	mpr, 242	; 1 cycle
                                 LCDDelay_L2:
0003b5 950a                      	dec	mpr		; 1 cycle
0003b6 f7f1                      	brne	LCDDelay_L2	; 2 cycles on branch, 1 if no branch
0003b7 951a                      	dec	r17		; 1 cycle
0003b8 f7d9                      	brne	LCDDelay_L1	; 2 cycles on branch, 1 if no branch
0003b9 911f                      	pop	r17		; 2 cycles
0003ba 910f                      	pop	mpr		; 2 cycles
0003bb 9508                      	ret			; 4 cycles
                                 
                                 ;*****************************************************************
                                 ;* Func:	div10
                                 ;* Desc:	Divides the value in the mpr by 10 and 
                                 ;*			puts the remainder in the 'r' register
                                 ;*			and the quotient in the 'q' register.
                                 ;*	DO NOT modify this function, trust me, it does
                                 ;*	divide by 10 :)  ~DZ		
                                 ;*****************************************************************
                                 div10:
0003bc 920f                      	push	r0		; Save register
                                 
                                 	; q = mpr / 10 = mpr * 0.000110011001101b
0003bd 2f50                      	mov	q, mpr	; q = mpr * 1.0b
0003be 9556                      	lsr	q		; q >> 2
0003bf 9556                      	lsr	q		; q = mpr * 0.01b
0003c0 0f50                      	add	q, mpr	; q = (q + mpr) >> 1
0003c1 9556                      	lsr	q		; q = mpr * 0.101b
0003c2 0f50                      	add	q, mpr	; q = (q + mpr) >> 3
0003c3 9556                      	lsr	q
0003c4 9556                      	lsr	q
0003c5 9556                      	lsr	q		; q = mpr * 0.001101b
0003c6 0f50                      	add	q, mpr	; q = (q + mpr) >> 1
0003c7 9556                      	lsr	q		; q = mpr * 0.1001101b
0003c8 0f50                      	add	q, mpr	; q = (q + mpr) >> 3
0003c9 9556                      	lsr	q				
0003ca 9556                      	lsr	q
0003cb 9556                      	lsr	q		; q = mpr * 0.0011001101b
0003cc 0f50                      	add	q, mpr	; q = (q + mpr) >> 1
0003cd 9556                      	lsr	q		; q = mpr * 0.10011001101b
0003ce 0f50                      	add	q, mpr	; q = (q + mpr) >> 4
0003cf 9556                      	lsr	q
0003d0 9556                      	lsr	q
0003d1 9556                      	lsr	q
0003d2 9556                      	lsr	q		; q = mpr * 0.000110011001101b
                                 
                                 	; compute the remainder as r = i - 10 * q
                                 	; calculate r = q * 10 = q * 1010b
0003d3 2f65                      	mov	r, q		; r = q * 1
0003d4 0f66                      	lsl	r		; r << 2
0003d5 0f66                      	lsl	r		; r = q * 100b
0003d6 0f65                      	add	r, q		; r = (r + q) << 1
0003d7 0f66                      	lsl	r		; r = q * 1010b
0003d8 2e06                      	mov	r0, r		; r0 = 10 * q
0003d9 2f60                      	mov	r, mpr	; r = mpr
0003da 1960                      	sub	r, r0		; r = mpr - 10 * q
                                 
                                 	; Fix any errors that occur
                                 div10_1:
0003db 306a                      	cpi	r, 10		; Compare with 10
0003dc f018                      	brlo	 div10_2	; do nothing if r < 10
0003dd 9553                      	inc	q		; fix quotient
0003de 506a                      	subi	r, 10		; fix remainder
0003df cffb                      	rjmp	 div10_1	; Continue until error is corrected
                                 
                                 div10_2:
0003e0 900f                      	pop	r0		; Restore registers
0003e1 9508                      	ret			; Return from function
                                 
                                 ;*********************************************************************
                                 ;*	Bitmap Font Information
                                 ;*	Adapted into assembly code by Justin Goins.
                                 ;*	You can edit characters or add symbols if you choose (by modifying the data below)
                                 ;*	Each character is represented as a 8 x 16 pattern of dots (8 dots wide and 16 dots high).
                                 ;*	This implies that 16 bytes are allocated to represent each character.
                                 ;*
                                 ;*	The character information is arranged so that each line below equates to a single character.
                                 ;*	The first line is ASCII character 0, the next line is ASCII character 1,
                                 ;*	the next line is ASCII character 2, and so on.
                                 ;*	You can assign characters to any index within the extended ASCII range (0 to 255).
                                 ;*	With a bit of experimentation it's possible to define and display emojis (or any other graphical output).
                                 ;*	Be creative and have fun!
                                 ;*
                                 ;*	From original license file:
                                 ;*	Copyright 2011 Suraj N. Kurapati <https://github.com/sunaku/tamzen-font>
                                 ;*	Tamzen font is free.  You are hereby granted permission to use, copy, modify, and distribute it as you see fit.
                                 ;*	Tamzen font is provided "as is" without any express or implied warranty.
                                 ;*********************************************************************
                                 FontBitmap:
0003e2 0000
0003e3 f00f
0003e4 1008
0003e5 1008
0003e6 1008
0003e7 1008
0003e8 f00f
0003e9 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x0F, 0xF0, 0x00, 0x00	; U+0000
0003ea fe03
0003eb fa7f
0003ec f683
0003ed ea83
0003ee d683
0003ef aa83
0003f0 567f
0003f1 fe03                      .DB	0x03, 0xFE, 0x7F, 0xFA, 0x83, 0xF6, 0x83, 0xEA, 0x83, 0xD6, 0x83, 0xAA, 0x7F, 0x56, 0x03, 0xFE	; U+E0A2
0003f2 5455
0003f3 aaaa
0003f4 5455
0003f5 aaaa
0003f6 5455
0003f7 aaaa
0003f8 5455
0003f9 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; U+2592
0003fa 5455
0003fb aaaa
0003fc 5455
0003fd aaaa
0003fe 5455
0003ff aaaa
000400 5455
000401 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000402 5455
000403 aaaa
000404 5455
000405 aaaa
000406 5455
000407 aaaa
000408 5455
000409 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00040a 5455
00040b aaaa
00040c 5455
00040d aaaa
00040e 5455
00040f aaaa
000410 5455
000411 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000412 5455
000413 aaaa
000414 5455
000415 aaaa
000416 5455
000417 aaaa
000418 5455
000419 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00041a 0000
00041b 0007
00041c 8008
00041d 8008
00041e 8008
00041f 0007
000420 0000
000421 0000                      .DB	0x00, 0x00, 0x07, 0x00, 0x08, 0x80, 0x08, 0x80, 0x08, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00B0
000422 5455
000423 aaaa
000424 5455
000425 aaaa
000426 5455
000427 aaaa
000428 5455
000429 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00042a 5455
00042b aaaa
00042c 5455
00042d aaaa
00042e 5455
00042f aaaa
000430 5455
000431 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000432 5455
000433 aaaa
000434 5455
000435 aaaa
000436 5455
000437 aaaa
000438 5455
000439 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00043a 8000
00043b 8000
00043c 8000
00043d 8000
00043e 80ff
00043f 0000
000440 0000
000441 0000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+2518
000442 8000
000443 8000
000444 8000
000445 8000
000446 fe00
000447 0000
000448 0000
000449 0000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+2510
00044a 0000
00044b 0000
00044c 0000
00044d 0000
00044e fe00
00044f 8000
000450 8000
000451 8000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+250C
000452 0000
000453 0000
000454 0000
000455 0000
000456 80ff
000457 8000
000458 8000
000459 8000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+2514
00045a 8000
00045b 8000
00045c 8000
00045d 8000
00045e feff
00045f 8000
000460 8000
000461 8000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0xFF, 0xFE, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+253C
000462 5455
000463 aaaa
000464 5455
000465 aaaa
000466 5455
000467 aaaa
000468 5455
000469 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00046a 5455
00046b aaaa
00046c 5455
00046d aaaa
00046e 5455
00046f aaaa
000470 5455
000471 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000472 8000
000473 8000
000474 8000
000475 8000
000476 8000
000477 8000
000478 8000
000479 8000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+2500
00047a 5455
00047b aaaa
00047c 5455
00047d aaaa
00047e 5455
00047f aaaa
000480 5455
000481 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000482 5455
000483 aaaa
000484 5455
000485 aaaa
000486 5455
000487 aaaa
000488 5455
000489 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00048a 0000
00048b 0000
00048c 0000
00048d 0000
00048e feff
00048f 8000
000490 8000
000491 8000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFE, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+251C
000492 8000
000493 8000
000494 8000
000495 8000
000496 feff
000497 0000
000498 0000
000499 0000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+2524
00049a 8000
00049b 8000
00049c 8000
00049d 8000
00049e 80ff
00049f 8000
0004a0 8000
0004a1 8000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0xFF, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+2534
0004a2 8000
0004a3 8000
0004a4 8000
0004a5 8000
0004a6 fe00
0004a7 8000
0004a8 8000
0004a9 8000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0xFE, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+252C
0004aa 0000
0004ab 0000
0004ac 0000
0004ad 0000
0004ae feff
0004af 0000
0004b0 0000
0004b1 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+2502
0004b2 5455
0004b3 aaaa
0004b4 5455
0004b5 aaaa
0004b6 5455
0004b7 aaaa
0004b8 5455
0004b9 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0004ba 5455
0004bb aaaa
0004bc 5455
0004bd aaaa
0004be 5455
0004bf aaaa
0004c0 5455
0004c1 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0004c2 5455
0004c3 aaaa
0004c4 5455
0004c5 aaaa
0004c6 5455
0004c7 aaaa
0004c8 5455
0004c9 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0004ca 5455
0004cb aaaa
0004cc 5455
0004cd aaaa
0004ce 5455
0004cf aaaa
0004d0 5455
0004d1 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0004d2 0000
0004d3 1001
0004d4 2001
0004d5 e007
0004d6 2009
0004d7 1009
0004d8 1008
0004d9 2004                      .DB	0x00, 0x00, 0x01, 0x10, 0x01, 0x20, 0x07, 0xE0, 0x09, 0x20, 0x09, 0x10, 0x08, 0x10, 0x04, 0x20	; U+00A3
0004da 5455
0004db aaaa
0004dc 5455
0004dd aaaa
0004de 5455
0004df aaaa
0004e0 5455
0004e1 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0004e2 0000
0004e3 0000
0004e4 0000
0004e5 0000
0004e6 0000
0004e7 0000
0004e8 0000
0004e9 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+0020
0004ea 0000
0004eb 0000
0004ec 0000
0004ed 301f
0004ee 0000
0004ef 0000
0004f0 0000
0004f1 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+0021
0004f2 0000
0004f3 0000
0004f4 001e
0004f5 0000
0004f6 0000
0004f7 001e
0004f8 0000
0004f9 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00	; U+0022
0004fa 0000
0004fb 4002
0004fc f00f
0004fd 4002
0004fe 4002
0004ff f00f
000500 4002
000501 0000                      .DB	0x00, 0x00, 0x02, 0x40, 0x0F, 0xF0, 0x02, 0x40, 0x02, 0x40, 0x0F, 0xF0, 0x02, 0x40, 0x00, 0x00	; U+0023
000502 0000
000503 0000
000504 2006
000505 2009
000506 3839
000507 2009
000508 c008
000509 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x06, 0x20, 0x09, 0x20, 0x39, 0x38, 0x09, 0x20, 0x08, 0xC0, 0x00, 0x00	; U+0024
00050a 0000
00050b 200c
00050c 4012
00050d 8012
00050e 600d
00050f 9002
000510 9004
000511 6008                      .DB	0x00, 0x00, 0x0C, 0x20, 0x12, 0x40, 0x12, 0x80, 0x0D, 0x60, 0x02, 0x90, 0x04, 0x90, 0x08, 0x60	; U+0025
000512 0000
000513 e00c
000514 1013
000515 1013
000516 900c
000517 6000
000518 6000
000519 9001                      .DB	0x00, 0x00, 0x0C, 0xE0, 0x13, 0x10, 0x13, 0x10, 0x0C, 0x90, 0x00, 0x60, 0x00, 0x60, 0x01, 0x90	; U+0026
00051a 0000
00051b 0000
00051c 0000
00051d 001e
00051e 0000
00051f 0000
000520 0000
000521 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+0027
000522 0000
000523 0000
000524 0000
000525 e003
000526 180c
000527 0410
000528 0000
000529 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE0, 0x0C, 0x18, 0x10, 0x04, 0x00, 0x00, 0x00, 0x00	; U+0028
00052a 0000
00052b 0000
00052c 0410
00052d 180c
00052e e003
00052f 0000
000530 0000
000531 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x10, 0x04, 0x0C, 0x18, 0x03, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+0029
000532 0000
000533 8000
000534 a002
000535 c001
000536 c001
000537 a002
000538 8000
000539 0000                      .DB	0x00, 0x00, 0x00, 0x80, 0x02, 0xA0, 0x01, 0xC0, 0x01, 0xC0, 0x02, 0xA0, 0x00, 0x80, 0x00, 0x00	; U+002A
00053a 0000
00053b 8000
00053c 8000
00053d 8000
00053e f007
00053f 8000
000540 8000
000541 8000                      .DB	0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x07, 0xF0, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+002B
000542 0000
000543 0000
000544 0000
000545 3200
000546 3c00
000547 0000
000548 0000
000549 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+002C
00054a 0000
00054b 8000
00054c 8000
00054d 8000
00054e 8000
00054f 8000
000550 8000
000551 0000                      .DB	0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00	; U+002D
000552 0000
000553 0000
000554 0000
000555 3000
000556 3000
000557 0000
000558 0000
000559 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+002E
00055a 0000
00055b 0c00
00055c 3000
00055d c000
00055e 0003
00055f 000c
000560 0000
000561 0000                      .DB	0x00, 0x00, 0x00, 0x0C, 0x00, 0x30, 0x00, 0xC0, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00	; U+002F
000562 0000
000563 e007
000564 5008
000565 9008
000566 1009
000567 100a
000568 e007
000569 0000                      .DB	0x00, 0x00, 0x07, 0xE0, 0x08, 0x50, 0x08, 0x90, 0x09, 0x10, 0x0A, 0x10, 0x07, 0xE0, 0x00, 0x00	; U+0030
00056a 0000
00056b 0000
00056c 1002
00056d 1004
00056e f00f
00056f 1000
000570 1000
000571 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x04, 0x10, 0x0F, 0xF0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00	; U+0031
000572 0000
000573 1004
000574 3008
000575 5008
000576 9008
000577 1009
000578 1006
000579 0000                      .DB	0x00, 0x00, 0x04, 0x10, 0x08, 0x30, 0x08, 0x50, 0x08, 0x90, 0x09, 0x10, 0x06, 0x10, 0x00, 0x00	; U+0032
00057a 0000
00057b 2008
00057c 1008
00057d 1009
00057e 100b
00057f 100d
000580 e008
000581 0000                      .DB	0x00, 0x00, 0x08, 0x20, 0x08, 0x10, 0x09, 0x10, 0x0B, 0x10, 0x0D, 0x10, 0x08, 0xE0, 0x00, 0x00	; U+0033
000582 0000
000583 c000
000584 4001
000585 4002
000586 4004
000587 f00f
000588 4000
000589 0000                      .DB	0x00, 0x00, 0x00, 0xC0, 0x01, 0x40, 0x02, 0x40, 0x04, 0x40, 0x0F, 0xF0, 0x00, 0x40, 0x00, 0x00	; U+0034
00058a 0000
00058b 200f
00058c 1009
00058d 1009
00058e 1009
00058f 1009
000590 e008
000591 0000                      .DB	0x00, 0x00, 0x0F, 0x20, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x08, 0xE0, 0x00, 0x00	; U+0035
000592 0000
000593 e003
000594 1005
000595 1009
000596 1009
000597 1001
000598 e000
000599 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x05, 0x10, 0x09, 0x10, 0x09, 0x10, 0x01, 0x10, 0x00, 0xE0, 0x00, 0x00	; U+0036
00059a 0000
00059b 0008
00059c 0008
00059d 3008
00059e c008
00059f 000b
0005a0 000c
0005a1 0000                      .DB	0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x30, 0x08, 0xC0, 0x0B, 0x00, 0x0C, 0x00, 0x00, 0x00	; U+0037
0005a2 0000
0005a3 e006
0005a4 1009
0005a5 1009
0005a6 1009
0005a7 1009
0005a8 e006
0005a9 0000                      .DB	0x00, 0x00, 0x06, 0xE0, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x06, 0xE0, 0x00, 0x00	; U+0038
0005aa 0000
0005ab 0007
0005ac 8008
0005ad 9008
0005ae 9008
0005af a008
0005b0 c007
0005b1 0000                      .DB	0x00, 0x00, 0x07, 0x00, 0x08, 0x80, 0x08, 0x90, 0x08, 0x90, 0x08, 0xA0, 0x07, 0xC0, 0x00, 0x00	; U+0039
0005b2 0000
0005b3 0000
0005b4 0000
0005b5 3006
0005b6 3006
0005b7 0000
0005b8 0000
0005b9 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x30, 0x06, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+003A
0005ba 0000
0005bb 0000
0005bc 0000
0005bd 3206
0005be 3c06
0005bf 0000
0005c0 0000
0005c1 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x32, 0x06, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+003B
0005c2 0000
0005c3 0000
0005c4 8000
0005c5 4001
0005c6 2002
0005c7 1004
0005c8 0000
0005c9 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x40, 0x02, 0x20, 0x04, 0x10, 0x00, 0x00, 0x00, 0x00	; U+003C
0005ca 0000
0005cb 4002
0005cc 4002
0005cd 4002
0005ce 4002
0005cf 4002
0005d0 4002
0005d1 0000                      .DB	0x00, 0x00, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x00, 0x00	; U+003D
0005d2 0000
0005d3 0000
0005d4 1004
0005d5 2002
0005d6 4001
0005d7 8000
0005d8 0000
0005d9 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x04, 0x10, 0x02, 0x20, 0x01, 0x40, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00	; U+003E
0005da 0000
0005db 0008
0005dc 0010
0005dd 3011
0005de 0012
0005df 0014
0005e0 0008
0005e1 0000                      .DB	0x00, 0x00, 0x08, 0x00, 0x10, 0x00, 0x11, 0x30, 0x12, 0x00, 0x14, 0x00, 0x08, 0x00, 0x00, 0x00	; U+003F
0005e2 0000
0005e3 f007
0005e4 0808
0005e5 c411
0005e6 2412
0005e7 2412
0005e8 440a
0005e9 e407                      .DB	0x00, 0x00, 0x07, 0xF0, 0x08, 0x08, 0x11, 0xC4, 0x12, 0x24, 0x12, 0x24, 0x0A, 0x44, 0x07, 0xE4	; U+0040
0005ea 0000
0005eb f003
0005ec 8004
0005ed 8008
0005ee 8008
0005ef 8004
0005f0 f003
0005f1 0000                      .DB	0x00, 0x00, 0x03, 0xF0, 0x04, 0x80, 0x08, 0x80, 0x08, 0x80, 0x04, 0x80, 0x03, 0xF0, 0x00, 0x00	; U+0041
0005f2 0000
0005f3 f00f
0005f4 1009
0005f5 1009
0005f6 1009
0005f7 1009
0005f8 e006
0005f9 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x06, 0xE0, 0x00, 0x00	; U+0042
0005fa 0000
0005fb c003
0005fc 2004
0005fd 1008
0005fe 1008
0005ff 1008
000600 1008
000601 0000                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x00, 0x00	; U+0043
000602 0000
000603 f00f
000604 1008
000605 1008
000606 1008
000607 2004
000608 c003
000609 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x04, 0x20, 0x03, 0xC0, 0x00, 0x00	; U+0044
00060a 0000
00060b f00f
00060c 1009
00060d 1009
00060e 1009
00060f 1009
000610 1008
000611 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x08, 0x10, 0x00, 0x00	; U+0045
000612 0000
000613 f00f
000614 0009
000615 0009
000616 0009
000617 0009
000618 0008
000619 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x08, 0x00, 0x00, 0x00	; U+0046
00061a 0000
00061b c003
00061c 2004
00061d 1008
00061e 1008
00061f 9008
000620 f008
000621 0000                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x08, 0x10, 0x08, 0x10, 0x08, 0x90, 0x08, 0xF0, 0x00, 0x00	; U+0047
000622 0000
000623 f00f
000624 0001
000625 0001
000626 0001
000627 0001
000628 f00f
000629 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x0F, 0xF0, 0x00, 0x00	; U+0048
00062a 0000
00062b 0000
00062c 1008
00062d 1008
00062e f00f
00062f 1008
000630 1008
000631 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x08, 0x10, 0x0F, 0xF0, 0x08, 0x10, 0x08, 0x10, 0x00, 0x00	; U+0049
000632 0000
000633 6000
000634 1000
000635 1000
000636 1000
000637 1000
000638 e00f
000639 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x0F, 0xE0, 0x00, 0x00	; U+004A
00063a 0000
00063b f00f
00063c 8001
00063d 8001
00063e 4002
00063f 2004
000640 1008
000641 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x01, 0x80, 0x01, 0x80, 0x02, 0x40, 0x04, 0x20, 0x08, 0x10, 0x00, 0x00	; U+004B
000642 0000
000643 f00f
000644 1000
000645 1000
000646 1000
000647 1000
000648 1000
000649 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00	; U+004C
00064a 0000
00064b f00f
00064c 0004
00064d 0002
00064e 8001
00064f 0002
000650 0004
000651 f00f                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x04, 0x00, 0x02, 0x00, 0x01, 0x80, 0x02, 0x00, 0x04, 0x00, 0x0F, 0xF0	; U+004D
000652 0000
000653 f00f
000654 0004
000655 0002
000656 0001
000657 8000
000658 f00f
000659 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x04, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x80, 0x0F, 0xF0, 0x00, 0x00	; U+004E
00065a 0000
00065b e007
00065c 1008
00065d 1008
00065e 1008
00065f 1008
000660 e007
000661 0000                      .DB	0x00, 0x00, 0x07, 0xE0, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x07, 0xE0, 0x00, 0x00	; U+004F
000662 0000
000663 f00f
000664 8008
000665 8008
000666 8008
000667 8008
000668 0007
000669 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x08, 0x80, 0x08, 0x80, 0x08, 0x80, 0x08, 0x80, 0x07, 0x00, 0x00, 0x00	; U+0050
00066a 0000
00066b e007
00066c 1008
00066d 1008
00066e 1008
00066f 1808
000670 e407
000671 0000                      .DB	0x00, 0x00, 0x07, 0xE0, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x08, 0x18, 0x07, 0xE4, 0x00, 0x00	; U+0051
000672 0000
000673 f00f
000674 8008
000675 8008
000676 c008
000677 a008
000678 1007
000679 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x08, 0x80, 0x08, 0x80, 0x08, 0xC0, 0x08, 0xA0, 0x07, 0x10, 0x00, 0x00	; U+0052
00067a 0000
00067b 1006
00067c 1009
00067d 1009
00067e 9008
00067f 9008
000680 6008
000681 0000                      .DB	0x00, 0x00, 0x06, 0x10, 0x09, 0x10, 0x09, 0x10, 0x08, 0x90, 0x08, 0x90, 0x08, 0x60, 0x00, 0x00	; U+0053
000682 0000
000683 0008
000684 0008
000685 0008
000686 f00f
000687 0008
000688 0008
000689 0008                      .DB	0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x0F, 0xF0, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00	; U+0054
00068a 0000
00068b e00f
00068c 1000
00068d 1000
00068e 1000
00068f 1000
000690 e00f
000691 0000                      .DB	0x00, 0x00, 0x0F, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x0F, 0xE0, 0x00, 0x00	; U+0055
000692 0000
000693 000f
000694 c000
000695 3000
000696 3000
000697 c000
000698 000f
000699 0000                      .DB	0x00, 0x00, 0x0F, 0x00, 0x00, 0xC0, 0x00, 0x30, 0x00, 0x30, 0x00, 0xC0, 0x0F, 0x00, 0x00, 0x00	; U+0056
00069a 0000
00069b f00f
00069c 1000
00069d 2000
00069e c000
00069f 2000
0006a0 1000
0006a1 f00f                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x00, 0x10, 0x00, 0x20, 0x00, 0xC0, 0x00, 0x20, 0x00, 0x10, 0x0F, 0xF0	; U+0057
0006a2 0000
0006a3 300c
0006a4 4002
0006a5 8001
0006a6 8001
0006a7 4002
0006a8 300c
0006a9 0000                      .DB	0x00, 0x00, 0x0C, 0x30, 0x02, 0x40, 0x01, 0x80, 0x01, 0x80, 0x02, 0x40, 0x0C, 0x30, 0x00, 0x00	; U+0058
0006aa 0000
0006ab 000c
0006ac 0002
0006ad 0001
0006ae f000
0006af 0001
0006b0 0002
0006b1 000c                      .DB	0x00, 0x00, 0x0C, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0xF0, 0x01, 0x00, 0x02, 0x00, 0x0C, 0x00	; U+0059
0006b2 0000
0006b3 3008
0006b4 5008
0006b5 9008
0006b6 1009
0006b7 100a
0006b8 100c
0006b9 1008                      .DB	0x00, 0x00, 0x08, 0x30, 0x08, 0x50, 0x08, 0x90, 0x09, 0x10, 0x0A, 0x10, 0x0C, 0x10, 0x08, 0x10	; U+005A
0006ba 0000
0006bb 0000
0006bc 0000
0006bd fc1f
0006be 0410
0006bf 0410
0006c0 0410
0006c1 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFC, 0x10, 0x04, 0x10, 0x04, 0x10, 0x04, 0x00, 0x00	; U+005B
0006c2 0000
0006c3 000c
0006c4 0003
0006c5 c000
0006c6 3000
0006c7 0c00
0006c8 0000
0006c9 0000                      .DB	0x00, 0x00, 0x0C, 0x00, 0x03, 0x00, 0x00, 0xC0, 0x00, 0x30, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00	; U+005C
0006ca 0000
0006cb 0410
0006cc 0410
0006cd 0410
0006ce fc1f
0006cf 0000
0006d0 0000
0006d1 0000                      .DB	0x00, 0x00, 0x10, 0x04, 0x10, 0x04, 0x10, 0x04, 0x1F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+005D
0006d2 0000
0006d3 0002
0006d4 0004
0006d5 0008
0006d6 0004
0006d7 0002
0006d8 0000
0006d9 0000                      .DB	0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00	; U+005E
0006da 0400
0006db 0400
0006dc 0400
0006dd 0400
0006de 0400
0006df 0400
0006e0 0400
0006e1 0400                      .DB	0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04	; U+005F
0006e2 0000
0006e3 0000
0006e4 0000
0006e5 0010
0006e6 0008
0006e7 0004
0006e8 0000
0006e9 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00	; U+0060
0006ea 0000
0006eb 6000
0006ec 9002
0006ed 9002
0006ee 9002
0006ef 9002
0006f0 f001
0006f1 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x02, 0x90, 0x02, 0x90, 0x02, 0x90, 0x02, 0x90, 0x01, 0xF0, 0x00, 0x00	; U+0061
0006f2 0000
0006f3 f01f
0006f4 1001
0006f5 1002
0006f6 1002
0006f7 1002
0006f8 e001
0006f9 0000                      .DB	0x00, 0x00, 0x1F, 0xF0, 0x01, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+0062
0006fa 0000
0006fb e001
0006fc 1002
0006fd 1002
0006fe 1002
0006ff 1002
000700 2001
000701 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x01, 0x20, 0x00, 0x00	; U+0063
000702 0000
000703 e001
000704 1002
000705 1002
000706 1002
000707 2002
000708 f01f
000709 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x20, 0x1F, 0xF0, 0x00, 0x00	; U+0064
00070a 0000
00070b e001
00070c 9002
00070d 9002
00070e 9002
00070f 9002
000710 9001
000711 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x90, 0x02, 0x90, 0x02, 0x90, 0x02, 0x90, 0x01, 0x90, 0x00, 0x00	; U+0065
000712 0000
000713 0002
000714 0002
000715 f00f
000716 0012
000717 0012
000718 0012
000719 0000                      .DB	0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x0F, 0xF0, 0x12, 0x00, 0x12, 0x00, 0x12, 0x00, 0x00, 0x00	; U+0066
00071a 0000
00071b e001
00071c 1202
00071d 1202
00071e 1202
00071f 1202
000720 fc03
000721 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x12, 0x02, 0x12, 0x02, 0x12, 0x02, 0x12, 0x03, 0xFC, 0x00, 0x00	; U+0067
000722 0000
000723 f01f
000724 0001
000725 0002
000726 0002
000727 0002
000728 f001
000729 0000                      .DB	0x00, 0x00, 0x1F, 0xF0, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x01, 0xF0, 0x00, 0x00	; U+0068
00072a 0000
00072b 0000
00072c 1002
00072d 1002
00072e f01b
00072f 1000
000730 1000
000731 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x02, 0x10, 0x1B, 0xF0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00	; U+0069
000732 0000
000733 0000
000734 0200
000735 0202
000736 0202
000737 fc1b
000738 0000
000739 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x1B, 0xFC, 0x00, 0x00, 0x00, 0x00	; U+006A
00073a 0000
00073b f01f
00073c 4000
00073d 8000
00073e 4001
00073f 2002
000740 1000
000741 0000                      .DB	0x00, 0x00, 0x1F, 0xF0, 0x00, 0x40, 0x00, 0x80, 0x01, 0x40, 0x02, 0x20, 0x00, 0x10, 0x00, 0x00	; U+006B
000742 0000
000743 0010
000744 0010
000745 e01f
000746 1000
000747 1000
000748 1000
000749 0000                      .DB	0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x1F, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00	; U+006c
00074a 0000
00074b f003
00074c 0002
00074d 0002
00074e f001
00074f 0002
000750 0002
000751 f001                      .DB	0x00, 0x00, 0x03, 0xF0, 0x02, 0x00, 0x02, 0x00, 0x01, 0xF0, 0x02, 0x00, 0x02, 0x00, 0x01, 0xF0	; U+006d
000752 0000
000753 f003
000754 0001
000755 0002
000756 0002
000757 0002
000758 f001
000759 0000                      .DB	0x00, 0x00, 0x03, 0xF0, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x01, 0xF0, 0x00, 0x00	; U+006e
00075a 0000
00075b e001
00075c 1002
00075d 1002
00075e 1002
00075f 1002
000760 e001
000761 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+006F
000762 0000
000763 fe03
000764 1001
000765 1002
000766 1002
000767 1002
000768 e001
000769 0000                      .DB	0x00, 0x00, 0x03, 0xFE, 0x01, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+0070
00076a 0000
00076b e001
00076c 1002
00076d 1002
00076e 1002
00076f 2002
000770 fe03
000771 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x20, 0x03, 0xFE, 0x00, 0x00	; U+0071
000772 0000
000773 f003
000774 0001
000775 0002
000776 0002
000777 0002
000778 0001
000779 0000                      .DB	0x00, 0x00, 0x03, 0xF0, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00	; U+0072
00077a 0000
00077b 1001
00077c 9002
00077d 9002
00077e 5002
00077f 5002
000780 2002
000781 0000                      .DB	0x00, 0x00, 0x01, 0x10, 0x02, 0x90, 0x02, 0x90, 0x02, 0x50, 0x02, 0x50, 0x02, 0x20, 0x00, 0x00	; U+0073
000782 0000
000783 0002
000784 0002
000785 e00f
000786 1002
000787 1002
000788 1002
000789 0000                      .DB	0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x0F, 0xE0, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x00, 0x00	; U+0074
00078a 0000
00078b e003
00078c 1000
00078d 1000
00078e 1000
00078f 2000
000790 f003
000791 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x20, 0x03, 0xF0, 0x00, 0x00	; U+0075
000792 0000
000793 0003
000794 c000
000795 3000
000796 3000
000797 c000
000798 0003
000799 0000                      .DB	0x00, 0x00, 0x03, 0x00, 0x00, 0xC0, 0x00, 0x30, 0x00, 0x30, 0x00, 0xC0, 0x03, 0x00, 0x00, 0x00	; U+0076
00079a 0000
00079b e003
00079c 1000
00079d 1000
00079e e001
00079f 1000
0007a0 1000
0007a1 e003                      .DB	0x00, 0x00, 0x03, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x01, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x03, 0xE0	; U+0077
0007a2 0000
0007a3 1002
0007a4 2001
0007a5 c000
0007a6 c000
0007a7 2001
0007a8 1002
0007a9 0000                      .DB	0x00, 0x00, 0x02, 0x10, 0x01, 0x20, 0x00, 0xC0, 0x00, 0xC0, 0x01, 0x20, 0x02, 0x10, 0x00, 0x00	; U+0078
0007aa 0000
0007ab e003
0007ac 1200
0007ad 1200
0007ae 1200
0007af 2200
0007b0 fc03
0007b1 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x00, 0x12, 0x00, 0x12, 0x00, 0x12, 0x00, 0x22, 0x03, 0xFC, 0x00, 0x00	; U+0079
0007b2 0000
0007b3 1002
0007b4 3002
0007b5 5002
0007b6 9002
0007b7 1003
0007b8 1002
0007b9 0000                      .DB	0x00, 0x00, 0x02, 0x10, 0x02, 0x30, 0x02, 0x50, 0x02, 0x90, 0x03, 0x10, 0x02, 0x10, 0x00, 0x00	; U+007A
0007ba 0000
0007bb 0000
0007bc 8000
0007bd 8000
0007be 780f
0007bf 0410
0007c0 0410
0007c1 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x0F, 0x78, 0x10, 0x04, 0x10, 0x04, 0x00, 0x00	; U+007B
0007c2 0000
0007c3 0000
0007c4 0000
0007c5 0000
0007c6 fc3f
0007c7 0000
0007c8 0000
0007c9 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+007C
0007ca 0000
0007cb 0410
0007cc 0410
0007cd 780f
0007ce 8000
0007cf 8000
0007d0 0000
0007d1 0000                      .DB	0x00, 0x00, 0x10, 0x04, 0x10, 0x04, 0x0F, 0x78, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00	; U+007D
0007d2 0000
0007d3 0006
0007d4 0008
0007d5 0008
0007d6 0004
0007d7 0002
0007d8 0002
0007d9 000c                      .DB	0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x08, 0x00, 0x04, 0x00, 0x02, 0x00, 0x02, 0x00, 0x0C, 0x00	; U+007E
0007da 5455
0007db aaaa
0007dc 5455
0007dd aaaa
0007de 5455
0007df aaaa
0007e0 5455
0007e1 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007e2 5455
0007e3 aaaa
0007e4 5455
0007e5 aaaa
0007e6 5455
0007e7 aaaa
0007e8 5455
0007e9 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007ea 5455
0007eb aaaa
0007ec 5455
0007ed aaaa
0007ee 5455
0007ef aaaa
0007f0 5455
0007f1 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007f2 5455
0007f3 aaaa
0007f4 5455
0007f5 aaaa
0007f6 5455
0007f7 aaaa
0007f8 5455
0007f9 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007fa 5455
0007fb aaaa
0007fc 5455
0007fd aaaa
0007fe 5455
0007ff aaaa
000800 5455
000801 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000802 5455
000803 aaaa
000804 5455
000805 aaaa
000806 5455
000807 aaaa
000808 5455
000809 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00080a 5455
00080b aaaa
00080c 5455
00080d aaaa
00080e 5455
00080f aaaa
000810 5455
000811 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000812 5455
000813 aaaa
000814 5455
000815 aaaa
000816 5455
000817 aaaa
000818 5455
000819 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00081a 5455
00081b aaaa
00081c 5455
00081d aaaa
00081e 5455
00081f aaaa
000820 5455
000821 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000822 5455
000823 aaaa
000824 5455
000825 aaaa
000826 5455
000827 aaaa
000828 5455
000829 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00082a 5455
00082b aaaa
00082c 5455
00082d aaaa
00082e 5455
00082f aaaa
000830 5455
000831 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000832 5455
000833 aaaa
000834 5455
000835 aaaa
000836 5455
000837 aaaa
000838 5455
000839 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00083a 5455
00083b aaaa
00083c 5455
00083d aaaa
00083e 5455
00083f aaaa
000840 5455
000841 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000842 5455
000843 aaaa
000844 5455
000845 aaaa
000846 5455
000847 aaaa
000848 5455
000849 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00084a 5455
00084b aaaa
00084c 5455
00084d aaaa
00084e 5455
00084f aaaa
000850 5455
000851 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000852 5455
000853 aaaa
000854 5455
000855 aaaa
000856 5455
000857 aaaa
000858 5455
000859 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00085a 5455
00085b aaaa
00085c 5455
00085d aaaa
00085e 5455
00085f aaaa
000860 5455
000861 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000862 5455
000863 aaaa
000864 5455
000865 aaaa
000866 5455
000867 aaaa
000868 5455
000869 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00086a 5455
00086b aaaa
00086c 5455
00086d aaaa
00086e 5455
00086f aaaa
000870 5455
000871 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000872 5455
000873 aaaa
000874 5455
000875 aaaa
000876 5455
000877 aaaa
000878 5455
000879 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00087a 5455
00087b aaaa
00087c 5455
00087d aaaa
00087e 5455
00087f aaaa
000880 5455
000881 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000882 5455
000883 aaaa
000884 5455
000885 aaaa
000886 5455
000887 aaaa
000888 5455
000889 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00088a 5455
00088b aaaa
00088c 5455
00088d aaaa
00088e 5455
00088f aaaa
000890 5455
000891 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000892 5455
000893 aaaa
000894 5455
000895 aaaa
000896 5455
000897 aaaa
000898 5455
000899 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00089a 5455
00089b aaaa
00089c 5455
00089d aaaa
00089e 5455
00089f aaaa
0008a0 5455
0008a1 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0008a2 5455
0008a3 aaaa
0008a4 5455
0008a5 aaaa
0008a6 5455
0008a7 aaaa
0008a8 5455
0008a9 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0008aa 5455
0008ab aaaa
0008ac 5455
0008ad aaaa
0008ae 5455
0008af aaaa
0008b0 5455
0008b1 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0008b2 5455
0008b3 aaaa
0008b4 5455
0008b5 aaaa
0008b6 5455
0008b7 aaaa
0008b8 5455
0008b9 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0008ba 5455
0008bb aaaa
0008bc 5455
0008bd aaaa
0008be 5455
0008bf aaaa
0008c0 5455
0008c1 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0008c2 5455
0008c3 aaaa
0008c4 5455
0008c5 aaaa
0008c6 5455
0008c7 aaaa
0008c8 5455
0008c9 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0008ca 5455
0008cb aaaa
0008cc 5455
0008cd aaaa
0008ce 5455
0008cf aaaa
0008d0 5455
0008d1 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0008d2 5455
0008d3 aaaa
0008d4 5455
0008d5 aaaa
0008d6 5455
0008d7 aaaa
0008d8 5455
0008d9 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0008da 5455
0008db aaaa
0008dc 5455
0008dd aaaa
0008de 5455
0008df aaaa
0008e0 5455
0008e1 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0008e2 0000
0008e3 0000
0008e4 0000
0008e5 0000
0008e6 0000
0008e7 0000
0008e8 0000
0008e9 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00A0
0008ea 0000
0008eb 0000
0008ec 0000
0008ed 3e03
0008ee 0000
0008ef 0000
0008f0 0000
0008f1 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00A1
0008f2 0000
0008f3 c003
0008f4 2004
0008f5 2004
0008f6 f81f
0008f7 2004
0008f8 2004
0008f9 4002                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x04, 0x20, 0x1F, 0xF8, 0x04, 0x20, 0x04, 0x20, 0x02, 0x40	; U+00A2
0008fa 0000
0008fb 1001
0008fc 2001
0008fd e007
0008fe 2009
0008ff 1009
000900 1008
000901 2004                      .DB	0x00, 0x00, 0x01, 0x10, 0x01, 0x20, 0x07, 0xE0, 0x09, 0x20, 0x09, 0x10, 0x08, 0x10, 0x04, 0x20	; U+00A3
000902 0000
000903 2004
000904 c003
000905 4002
000906 4002
000907 c003
000908 2004
000909 0000                      .DB	0x00, 0x00, 0x04, 0x20, 0x03, 0xC0, 0x02, 0x40, 0x02, 0x40, 0x03, 0xC0, 0x04, 0x20, 0x00, 0x00	; U+00A4
00090a 0000
00090b 0008
00090c 4005
00090d 4003
00090e f001
00090f 4003
000910 4005
000911 0008                      .DB	0x00, 0x00, 0x08, 0x00, 0x05, 0x40, 0x03, 0x40, 0x01, 0xF0, 0x03, 0x40, 0x05, 0x40, 0x08, 0x00	; U+00A5
000912 0000
000913 0000
000914 0000
000915 0000
000916 3c0f
000917 0000
000918 0000
000919 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00A6
00091a 5455
00091b aaaa
00091c 5455
00091d aaaa
00091e 5455
00091f aaaa
000920 5455
000921 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000922 0000
000923 0000
000924 0060
000925 0000
000926 0000
000927 0060
000928 0000
000929 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00A8
00092a 0000
00092b c003
00092c 2004
00092d 9009
00092e 500a
00092f 500a
000930 2004
000931 c003                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x09, 0x90, 0x0A, 0x50, 0x0A, 0x50, 0x04, 0x20, 0x03, 0xC0	; U+00A9
000932 5455
000933 aaaa
000934 5455
000935 aaaa
000936 5455
000937 aaaa
000938 5455
000939 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00093a 0000
00093b 8000
00093c 4001
00093d 2002
00093e 9004
00093f 4001
000940 2002
000941 1004                      .DB	0x00, 0x00, 0x00, 0x80, 0x01, 0x40, 0x02, 0x20, 0x04, 0x90, 0x01, 0x40, 0x02, 0x20, 0x04, 0x10	; U+00AB
000942 5455
000943 aaaa
000944 5455
000945 aaaa
000946 5455
000947 aaaa
000948 5455
000949 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00094a 0000
00094b 8000
00094c 8000
00094d 8000
00094e 8000
00094f 8000
000950 8000
000951 0000                      .DB	0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00	; U+00AD
000952 5455
000953 aaaa
000954 5455
000955 aaaa
000956 5455
000957 aaaa
000958 5455
000959 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00095a 5455
00095b aaaa
00095c 5455
00095d aaaa
00095e 5455
00095f aaaa
000960 5455
000961 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000962 0000
000963 0007
000964 8008
000965 8008
000966 8008
000967 0007
000968 0000
000969 0000                      .DB	0x00, 0x00, 0x07, 0x00, 0x08, 0x80, 0x08, 0x80, 0x08, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00B0
00096a 5455
00096b aaaa
00096c 5455
00096d aaaa
00096e 5455
00096f aaaa
000970 5455
000971 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000972 5455
000973 aaaa
000974 5455
000975 aaaa
000976 5455
000977 aaaa
000978 5455
000979 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00097a 5455
00097b aaaa
00097c 5455
00097d aaaa
00097e 5455
00097f aaaa
000980 5455
000981 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000982 5455
000983 aaaa
000984 5455
000985 aaaa
000986 5455
000987 aaaa
000988 5455
000989 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00098a 5455
00098b aaaa
00098c 5455
00098d aaaa
00098e 5455
00098f aaaa
000990 5455
000991 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000992 5455
000993 aaaa
000994 5455
000995 aaaa
000996 5455
000997 aaaa
000998 5455
000999 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00099a 5455
00099b aaaa
00099c 5455
00099d aaaa
00099e 5455
00099f aaaa
0009a0 5455
0009a1 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0009a2 0000
0009a3 0000
0009a4 0200
0009a5 0200
0009a6 0c00
0009a7 0000
0009a8 0000
0009a9 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00B8
0009aa 5455
0009ab aaaa
0009ac 5455
0009ad aaaa
0009ae 5455
0009af aaaa
0009b0 5455
0009b1 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0009b2 5455
0009b3 aaaa
0009b4 5455
0009b5 aaaa
0009b6 5455
0009b7 aaaa
0009b8 5455
0009b9 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0009ba 0000
0009bb 1004
0009bc 2002
0009bd 4001
0009be 9004
0009bf 2002
0009c0 4001
0009c1 8000                      .DB	0x00, 0x00, 0x04, 0x10, 0x02, 0x20, 0x01, 0x40, 0x04, 0x90, 0x02, 0x20, 0x01, 0x40, 0x00, 0x80	; U+00BB
0009c2 5455
0009c3 aaaa
0009c4 5455
0009c5 aaaa
0009c6 5455
0009c7 aaaa
0009c8 5455
0009c9 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0009ca 5455
0009cb aaaa
0009cc 5455
0009cd aaaa
0009ce 5455
0009cf aaaa
0009d0 5455
0009d1 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0009d2 5455
0009d3 aaaa
0009d4 5455
0009d5 aaaa
0009d6 5455
0009d7 aaaa
0009d8 5455
0009d9 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0009da 0000
0009db 0000
0009dc 0c00
0009dd 1200
0009de 2203
0009df 0200
0009e0 0400
0009e1 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x12, 0x03, 0x22, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00	; U+00BF
0009e2 0000
0009e3 7000
0009e4 c043
0009e5 402c
0009e6 400c
0009e7 c003
0009e8 7000
0009e9 0000                      .DB	0x00, 0x00, 0x00, 0x70, 0x43, 0xC0, 0x2C, 0x40, 0x0C, 0x40, 0x03, 0xC0, 0x00, 0x70, 0x00, 0x00	; U+00C0
0009ea 0000
0009eb 7000
0009ec c003
0009ed 400c
0009ee 402c
0009ef c043
0009f0 7000
0009f1 0000                      .DB	0x00, 0x00, 0x00, 0x70, 0x03, 0xC0, 0x0C, 0x40, 0x2C, 0x40, 0x43, 0xC0, 0x00, 0x70, 0x00, 0x00	; U+00C1
0009f2 0000
0009f3 7000
0009f4 c023
0009f5 404c
0009f6 404c
0009f7 c023
0009f8 7000
0009f9 0000                      .DB	0x00, 0x00, 0x00, 0x70, 0x23, 0xC0, 0x4C, 0x40, 0x4C, 0x40, 0x23, 0xC0, 0x00, 0x70, 0x00, 0x00	; U+00C2
0009fa 0000
0009fb 7020
0009fc c043
0009fd 404c
0009fe 402c
0009ff c023
000a00 7040
000a01 0000                      .DB	0x00, 0x00, 0x20, 0x70, 0x43, 0xC0, 0x4C, 0x40, 0x2C, 0x40, 0x23, 0xC0, 0x40, 0x70, 0x00, 0x00	; U+00C3
000a02 0000
000a03 7000
000a04 c063
000a05 400c
000a06 400c
000a07 c063
000a08 7000
000a09 0000                      .DB	0x00, 0x00, 0x00, 0x70, 0x63, 0xC0, 0x0C, 0x40, 0x0C, 0x40, 0x63, 0xC0, 0x00, 0x70, 0x00, 0x00	; U+00C4
000a0a 0000
000a0b 7000
000a0c c033
000a0d 404c
000a0e 404c
000a0f c033
000a10 7000
000a11 0000                      .DB	0x00, 0x00, 0x00, 0x70, 0x33, 0xC0, 0x4C, 0x40, 0x4C, 0x40, 0x33, 0xC0, 0x00, 0x70, 0x00, 0x00	; U+00C5
000a12 0000
000a13 7000
000a14 c003
000a15 400c
000a16 f00f
000a17 1009
000a18 1009
000a19 1008                      .DB	0x00, 0x00, 0x00, 0x70, 0x03, 0xC0, 0x0C, 0x40, 0x0F, 0xF0, 0x09, 0x10, 0x09, 0x10, 0x08, 0x10	; U+00C6
000a1a 0000
000a1b c003
000a1c 2204
000a1d 1208
000a1e 1c08
000a1f 1008
000a20 1008
000a21 0000                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x22, 0x08, 0x12, 0x08, 0x1C, 0x08, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00C7
000a22 0000
000a23 f00f
000a24 1049
000a25 1029
000a26 1009
000a27 1009
000a28 1008
000a29 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x49, 0x10, 0x29, 0x10, 0x09, 0x10, 0x09, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00C8
000a2a 0000
000a2b f00f
000a2c 1009
000a2d 1009
000a2e 1029
000a2f 1049
000a30 1008
000a31 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x09, 0x10, 0x09, 0x10, 0x29, 0x10, 0x49, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00C9
000a32 0000
000a33 f00f
000a34 1029
000a35 1049
000a36 1049
000a37 1029
000a38 1008
000a39 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x29, 0x10, 0x49, 0x10, 0x49, 0x10, 0x29, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00CA
000a3a 0000
000a3b f00f
000a3c 1069
000a3d 1009
000a3e 1009
000a3f 1069
000a40 1008
000a41 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x69, 0x10, 0x09, 0x10, 0x09, 0x10, 0x69, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00CB
000a42 0000
000a43 0000
000a44 1008
000a45 1048
000a46 f02f
000a47 1008
000a48 1008
000a49 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x48, 0x10, 0x2F, 0xF0, 0x08, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00CC
000a4a 0000
000a4b 0000
000a4c 1008
000a4d 1008
000a4e f02f
000a4f 1048
000a50 1008
000a51 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x08, 0x10, 0x2F, 0xF0, 0x48, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00CD
000a52 0000
000a53 0000
000a54 1008
000a55 1028
000a56 f04f
000a57 1028
000a58 1008
000a59 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x28, 0x10, 0x4F, 0xF0, 0x28, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00CE
000a5a 0000
000a5b 0000
000a5c 1008
000a5d 1068
000a5e f00f
000a5f 1068
000a60 1008
000a61 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x68, 0x10, 0x0F, 0xF0, 0x68, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00CF
000a62 0000
000a63 0001
000a64 f00f
000a65 1009
000a66 1009
000a67 1008
000a68 2004
000a69 c003                      .DB	0x00, 0x00, 0x01, 0x00, 0x0F, 0xF0, 0x09, 0x10, 0x09, 0x10, 0x08, 0x10, 0x04, 0x20, 0x03, 0xC0	; U+00D0
000a6a 0000
000a6b f02f
000a6c 0044
000a6d 0042
000a6e 0021
000a6f 8020
000a70 f04f
000a71 0000                      .DB	0x00, 0x00, 0x2F, 0xF0, 0x44, 0x00, 0x42, 0x00, 0x21, 0x00, 0x20, 0x80, 0x4F, 0xF0, 0x00, 0x00	; U+00D1
000a72 0000
000a73 c003
000a74 2004
000a75 1048
000a76 1028
000a77 1008
000a78 2004
000a79 c003                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x48, 0x10, 0x28, 0x10, 0x08, 0x10, 0x04, 0x20, 0x03, 0xC0	; U+00D2
000a7a 0000
000a7b c003
000a7c 2004
000a7d 1008
000a7e 1028
000a7f 1048
000a80 2004
000a81 c003                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x08, 0x10, 0x28, 0x10, 0x48, 0x10, 0x04, 0x20, 0x03, 0xC0	; U+00D3
000a82 0000
000a83 c003
000a84 2004
000a85 1028
000a86 1048
000a87 1028
000a88 2004
000a89 c003                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x28, 0x10, 0x48, 0x10, 0x28, 0x10, 0x04, 0x20, 0x03, 0xC0	; U+00D4
000a8a 0000
000a8b c003
000a8c 2024
000a8d 1048
000a8e 1048
000a8f 1028
000a90 2024
000a91 c043                      .DB	0x00, 0x00, 0x03, 0xC0, 0x24, 0x20, 0x48, 0x10, 0x48, 0x10, 0x28, 0x10, 0x24, 0x20, 0x43, 0xC0	; U+00D5
000a92 0000
000a93 c003
000a94 2064
000a95 1008
000a96 1008
000a97 1008
000a98 2064
000a99 c003                      .DB	0x00, 0x00, 0x03, 0xC0, 0x64, 0x20, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x64, 0x20, 0x03, 0xC0	; U+00D6
000a9a 0000
000a9b 0000
000a9c 2002
000a9d 4001
000a9e 8000
000a9f 4001
000aa0 2002
000aa1 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x02, 0x20, 0x01, 0x40, 0x00, 0x80, 0x01, 0x40, 0x02, 0x20, 0x00, 0x00	; U+00D7
000aa2 0000
000aa3 c803
000aa4 3004
000aa5 5008
000aa6 9009
000aa7 100a
000aa8 200c
000aa9 c013                      .DB	0x00, 0x00, 0x03, 0xC8, 0x04, 0x30, 0x08, 0x50, 0x09, 0x90, 0x0A, 0x10, 0x0C, 0x20, 0x13, 0xC0	; U+00D8
000aaa 0000
000aab e00f
000aac 1040
000aad 1020
000aae 1000
000aaf 1000
000ab0 e00f
000ab1 0000                      .DB	0x00, 0x00, 0x0F, 0xE0, 0x40, 0x10, 0x20, 0x10, 0x00, 0x10, 0x00, 0x10, 0x0F, 0xE0, 0x00, 0x00	; U+00D9
000ab2 0000
000ab3 e00f
000ab4 1000
000ab5 1000
000ab6 1020
000ab7 1040
000ab8 e00f
000ab9 0000                      .DB	0x00, 0x00, 0x0F, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x20, 0x10, 0x40, 0x10, 0x0F, 0xE0, 0x00, 0x00	; U+00DA
000aba 0000
000abb e00f
000abc 1020
000abd 1040
000abe 1040
000abf 1020
000ac0 e00f
000ac1 0000                      .DB	0x00, 0x00, 0x0F, 0xE0, 0x20, 0x10, 0x40, 0x10, 0x40, 0x10, 0x20, 0x10, 0x0F, 0xE0, 0x00, 0x00	; U+00DB
000ac2 0000
000ac3 e00f
000ac4 1060
000ac5 1000
000ac6 1000
000ac7 1060
000ac8 e00f
000ac9 0000                      .DB	0x00, 0x00, 0x0F, 0xE0, 0x60, 0x10, 0x00, 0x10, 0x00, 0x10, 0x60, 0x10, 0x0F, 0xE0, 0x00, 0x00	; U+00DC
000aca 0000
000acb 000c
000acc 0062
000acd 0001
000ace f000
000acf 0001
000ad0 0062
000ad1 000c                      .DB	0x00, 0x00, 0x0C, 0x00, 0x62, 0x00, 0x01, 0x00, 0x00, 0xF0, 0x01, 0x00, 0x62, 0x00, 0x0C, 0x00	; U+00DD
000ad2 0000
000ad3 f00f
000ad4 2004
000ad5 2004
000ad6 2004
000ad7 2004
000ad8 c003
000ad9 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x04, 0x20, 0x04, 0x20, 0x04, 0x20, 0x04, 0x20, 0x03, 0xC0, 0x00, 0x00	; U+00DE
000ada 0000
000adb f007
000adc 0008
000add 0008
000ade 1009
000adf 100b
000ae0 e004
000ae1 0000                      .DB	0x00, 0x00, 0x07, 0xF0, 0x08, 0x00, 0x08, 0x00, 0x09, 0x10, 0x0B, 0x10, 0x04, 0xE0, 0x00, 0x00	; U+00DF
000ae2 0000
000ae3 6000
000ae4 9012
000ae5 900a
000ae6 9002
000ae7 9002
000ae8 f001
000ae9 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x12, 0x90, 0x0A, 0x90, 0x02, 0x90, 0x02, 0x90, 0x01, 0xF0, 0x00, 0x00	; U+00E0
000aea 0000
000aeb 6000
000aec 9002
000aed 9002
000aee 900a
000aef 9012
000af0 f001
000af1 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x02, 0x90, 0x02, 0x90, 0x0A, 0x90, 0x12, 0x90, 0x01, 0xF0, 0x00, 0x00	; U+00E1
000af2 0000
000af3 6000
000af4 900a
000af5 9012
000af6 9012
000af7 900a
000af8 f001
000af9 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x0A, 0x90, 0x12, 0x90, 0x12, 0x90, 0x0A, 0x90, 0x01, 0xF0, 0x00, 0x00	; U+00E2
000afa 0000
000afb 6008
000afc 9012
000afd 9012
000afe 900a
000aff 900a
000b00 f011
000b01 0000                      .DB	0x00, 0x00, 0x08, 0x60, 0x12, 0x90, 0x12, 0x90, 0x0A, 0x90, 0x0A, 0x90, 0x11, 0xF0, 0x00, 0x00	; U+00E3
000b02 0000
000b03 6000
000b04 901a
000b05 9002
000b06 9002
000b07 901a
000b08 f001
000b09 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x1A, 0x90, 0x02, 0x90, 0x02, 0x90, 0x1A, 0x90, 0x01, 0xF0, 0x00, 0x00	; U+00E4
000b0a 0000
000b0b 6000
000b0c 9032
000b0d 904a
000b0e 904a
000b0f 9032
000b10 f001
000b11 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x32, 0x90, 0x4A, 0x90, 0x4A, 0x90, 0x32, 0x90, 0x01, 0xF0, 0x00, 0x00	; U+00E5
000b12 0000
000b13 6000
000b14 9002
000b15 9002
000b16 e001
000b17 9002
000b18 9002
000b19 9001                      .DB	0x00, 0x00, 0x00, 0x60, 0x02, 0x90, 0x02, 0x90, 0x01, 0xE0, 0x02, 0x90, 0x02, 0x90, 0x01, 0x90	; U+00E6
000b1a 0000
000b1b e001
000b1c 1202
000b1d 1202
000b1e 1c02
000b1f 1002
000b20 2001
000b21 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x12, 0x02, 0x12, 0x02, 0x1C, 0x02, 0x10, 0x01, 0x20, 0x00, 0x00	; U+00E7
000b22 0000
000b23 e001
000b24 9012
000b25 900a
000b26 9002
000b27 9002
000b28 9001
000b29 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x12, 0x90, 0x0A, 0x90, 0x02, 0x90, 0x02, 0x90, 0x01, 0x90, 0x00, 0x00	; U+00E8
000b2a 0000
000b2b e001
000b2c 9002
000b2d 9002
000b2e 900a
000b2f 9012
000b30 9001
000b31 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x90, 0x02, 0x90, 0x0A, 0x90, 0x12, 0x90, 0x01, 0x90, 0x00, 0x00	; U+00E9
000b32 0000
000b33 e001
000b34 900a
000b35 9012
000b36 9012
000b37 900a
000b38 9001
000b39 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x0A, 0x90, 0x12, 0x90, 0x12, 0x90, 0x0A, 0x90, 0x01, 0x90, 0x00, 0x00	; U+00EA
000b3a 0000
000b3b e001
000b3c 901a
000b3d 9002
000b3e 9002
000b3f 901a
000b40 9001
000b41 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x1A, 0x90, 0x02, 0x90, 0x02, 0x90, 0x1A, 0x90, 0x01, 0x90, 0x00, 0x00	; U+00EB
000b42 0000
000b43 0000
000b44 1012
000b45 100a
000b46 f003
000b47 1000
000b48 1000
000b49 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x12, 0x10, 0x0A, 0x10, 0x03, 0xF0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00	; U+00EC
000b4a 0000
000b4b 0000
000b4c 1002
000b4d 1002
000b4e f00b
000b4f 1010
000b50 1000
000b51 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x02, 0x10, 0x0B, 0xF0, 0x10, 0x10, 0x00, 0x10, 0x00, 0x00	; U+00ED
000b52 0000
000b53 0000
000b54 100a
000b55 1012
000b56 f013
000b57 1008
000b58 1000
000b59 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x0A, 0x10, 0x12, 0x10, 0x13, 0xF0, 0x08, 0x10, 0x00, 0x10, 0x00, 0x00	; U+00EE
000b5a 0000
000b5b 0000
000b5c 101a
000b5d 1002
000b5e f003
000b5f 1018
000b60 1000
000b61 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x1A, 0x10, 0x02, 0x10, 0x03, 0xF0, 0x18, 0x10, 0x00, 0x10, 0x00, 0x00	; U+00EF
000b62 0000
000b63 e001
000b64 100a
000b65 102a
000b66 101a
000b67 1016
000b68 e021
000b69 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x0A, 0x10, 0x2A, 0x10, 0x1A, 0x10, 0x16, 0x10, 0x21, 0xE0, 0x00, 0x00	; U+00F0
000b6a 0000
000b6b f00b
000b6c 0012
000b6d 0012
000b6e 000a
000b6f 000a
000b70 f011
000b71 0000                      .DB	0x00, 0x00, 0x0B, 0xF0, 0x12, 0x00, 0x12, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x11, 0xF0, 0x00, 0x00	; U+00F1
000b72 0000
000b73 e001
000b74 1012
000b75 100a
000b76 1002
000b77 1002
000b78 e001
000b79 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x12, 0x10, 0x0A, 0x10, 0x02, 0x10, 0x02, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+00F2
000b7a 0000
000b7b e001
000b7c 1002
000b7d 1002
000b7e 100a
000b7f 1012
000b80 e001
000b81 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x10, 0x02, 0x10, 0x0A, 0x10, 0x12, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+00F3
000b82 0000
000b83 e001
000b84 100a
000b85 1012
000b86 1012
000b87 100a
000b88 e001
000b89 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x0A, 0x10, 0x12, 0x10, 0x12, 0x10, 0x0A, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+00F4
000b8a 0000
000b8b e009
000b8c 1012
000b8d 1012
000b8e 100a
000b8f 100a
000b90 e011
000b91 0000                      .DB	0x00, 0x00, 0x09, 0xE0, 0x12, 0x10, 0x12, 0x10, 0x0A, 0x10, 0x0A, 0x10, 0x11, 0xE0, 0x00, 0x00	; U+00F5
000b92 0000
000b93 e001
000b94 101a
000b95 1002
000b96 1002
000b97 101a
000b98 e001
000b99 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x1A, 0x10, 0x02, 0x10, 0x02, 0x10, 0x1A, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+00F6
000b9a 0000
000b9b 8000
000b9c 8000
000b9d b006
000b9e b006
000b9f 8000
000ba0 8000
000ba1 0000                      .DB	0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x06, 0xB0, 0x06, 0xB0, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00	; U+00F7
000ba2 0000
000ba3 e801
000ba4 3002
000ba5 5002
000ba6 9002
000ba7 1003
000ba8 e005
000ba9 0000                      .DB	0x00, 0x00, 0x01, 0xE8, 0x02, 0x30, 0x02, 0x50, 0x02, 0x90, 0x03, 0x10, 0x05, 0xE0, 0x00, 0x00	; U+00F8
000baa 0000
000bab e003
000bac 1010
000bad 1008
000bae 1000
000baf 1000
000bb0 f003
000bb1 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x10, 0x10, 0x08, 0x10, 0x00, 0x10, 0x00, 0x10, 0x03, 0xF0, 0x00, 0x00	; U+00F9
000bb2 0000
000bb3 e003
000bb4 1000
000bb5 1000
000bb6 1008
000bb7 1010
000bb8 f003
000bb9 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x08, 0x10, 0x10, 0x10, 0x03, 0xF0, 0x00, 0x00	; U+00FA
000bba 0000
000bbb e003
000bbc 1008
000bbd 1010
000bbe 1010
000bbf 1008
000bc0 f003
000bc1 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x03, 0xF0, 0x00, 0x00	; U+00FB
000bc2 0000
000bc3 e003
000bc4 1018
000bc5 1000
000bc6 1000
000bc7 1018
000bc8 f003
000bc9 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x18, 0x10, 0x00, 0x10, 0x00, 0x10, 0x18, 0x10, 0x03, 0xF0, 0x00, 0x00	; U+00FC
000bca 0000
000bcb e003
000bcc 1200
000bcd 1200
000bce 1208
000bcf 1210
000bd0 fc03
000bd1 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x00, 0x12, 0x00, 0x12, 0x08, 0x12, 0x10, 0x12, 0x03, 0xFC, 0x00, 0x00	; U+00FD
000bd2 0000
000bd3 fe1f
000bd4 1002
000bd5 1002
000bd6 1002
000bd7 1002
000bd8 e001
000bd9 0000                      .DB	0x00, 0x00, 0x1F, 0xFE, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+00FE
000bda 0000
000bdb e003
000bdc 1218
000bdd 1200
000bde 1200
000bdf 1218
000be0 fc03
000be1 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x18, 0x12, 0x00, 0x12, 0x00, 0x12, 0x18, 0x12, 0x03, 0xFC, 0x00, 0x00	; U+00FF
                                 
                                 
                                 
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega32U4" register use summary:
x  :  10 y  :   0 z  :   8 r0 :  12 r1 :   9 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 216 r17:  47 r18:  28 r19:  25 r20:   3 
r21:  28 r22:  13 r23:  10 r24:   5 r25:   5 r26:  36 r27:  33 r28:  40 
r29:  36 r30:  47 r31:  43 
Registers used: 20 out of 35 (57.1%)

"ATmega32U4" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   1 add   :   9 adiw  :   5 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  27 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 brlt  :   0 brmi  :   0 
brne  :  14 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   1 cbi   :  14 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   1 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   4 cpc   :   0 
cpi   :  30 cpse  :   0 dec   :  11 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   9 inc   :   3 jmp   :   0 
ld    :   1 ldd   :   0 ldi   : 182 lds   :   2 lpm   :  14 lsl   :   3 
lsr   :  15 mov   :  24 movw  :   1 mul   :   1 muls  :   0 mulsu :   0 
neg   :   0 nop   :   2 or    :   2 ori   :   2 out   :  28 pop   : 103 
push  : 101 rcall :  95 ret   :  43 reti  :   4 rjmp  :  34 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  15 sbic  :   5 sbis  :   2 
sbiw  :   5 sbr   :   0 sbrc  :   2 sbrs  :   6 sec   :   0 seh   :   0 
sei   :   2 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   9 std   :   0 sts   :  12 
sub   :   2 subi  :   1 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 44 out of 113 (38.9%)

"ATmega32U4" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0017c4   1718   4212   5930   32768  18.1%
[.dseg] 0x000100 0x000100      0      0      0    2560   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
